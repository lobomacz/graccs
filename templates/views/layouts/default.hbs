<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1 user-scalable=no" />
    <meta name="description" content="Sistema de información y Comunicación Regional" />
    <meta name="author" content="Casabe" />
    <meta name="keywords" content="" />
    <link rel="icon" type="image/ico" href="/favicon.ico" />

    <title>{{generalInfo.title}} | Sistema de información y Comunicación Regional</title>

    <!-- styles -->
    <link href="/assets/css/bootstrap.min.css" rel="stylesheet" media="screen" />
    <link href="/assets/css/pace-theme-minimal.css" rel="stylesheet" media="screen" />
    <link href="/assets/css/lato.css" rel="stylesheet" media="screen" />
    <link href="/assets/css/bebas.css" rel="stylesheet" media="screen">
    <link href="/assets/css/bootstrap.helpers.css" rel="stylesheet" media="screen" />
    <link href="/assets/css/animate.min.css" rel="stylesheet" media="screen" />
    <link href="/assets/css/graccs.theme.css" rel="stylesheet" media="screen" />
	{{#if hashero}}
        <link href="/assets/css/graccs.hero.css" rel="stylesheet" media="screen" />
	{{/if}}
	{{#if isContactSection}}
        <link href="/assets/css/graccs.contact.css" rel="stylesheet" media="screen" />
	{{/if}}
	{{#if isNewsSection}}
        <link href="/assets/css/graccs.grid.news.css" rel="stylesheet" media="screen" />
	{{/if}}
	{{#if isIndicatorsSection}}
        <link href="/assets/css/select2.css" rel="stylesheet" media="screen" />
        <link href="/assets/css/select2-bootstrap.css" rel="stylesheet" media="screen" />
        <link href="/assets/css/css-stars.css" rel="stylesheet" media="screen" />
        <link href="/assets/css/graccs.article.common.css" rel="stylesheet" media="screen" />
        <link href="/assets/css/graccs.indicator.css" rel="stylesheet" media="screen" />
	{{/if}}
	{{#if isNewsDetailsSection}}
        <link href="/assets/css/css-stars.css" rel="stylesheet" media="screen" />
        <link href="/assets/css/graccs.article.common.css" rel="stylesheet" media="screen" />
        <link href="/assets/css/graccs.news.css" rel="stylesheet" media="screen" />
	{{/if}}
	{{#if isSearchSection}}
        <link href="/assets/css/css-stars.css" rel="stylesheet" media="screen" />
        <link href="/assets/css/graccs.article.common.css" rel="stylesheet" media="screen" />
        <link href="/assets/css/graccs.search.css" rel="stylesheet" media="screen" />
	{{/if}}
</head>
<body>
	<div id="page">
        <div class="background-fill"></div>
		{{#if hashero}}
			<section class="hero">
                <div class="container">
                    <div class="graccs-logo wow fadeInLeft">
                        <img src="/assets/img/graccs-logo.svg" width="230" height="50" alt="" />
                    <span>
						{{#if generalInfo}}
							{{{generalInfo.heroSubtitle}}}
						{{/if}}
                    </span>
                        <img class="push-action" src="/assets/img/action-button.svg" width="50" />
                    </div>
                    <div class="hero-notice">
                        <div class="content-wrapper ">
                            <div>
								{{#if generalInfo}}
									{{generalInfo.heroDescription}}
								{{/if}}
                                <nav class="hidden-xs hidden-sm">
                                    <ul class="nav links friend-links">
										{{#if links}}
											{{#each links}}
                                                <li>
                                                    <a href="{{url}}" class="symbol" target="_blank">{{label}}</a>
                                                </li>
											{{/each}}
										{{/if}}
                                    </ul>
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
		{{/if}}
        <nav id="headroom" class="navbar navbar-fixed-top" role="navigation">
            <div class="container">
                <div class="navbar-wrapper va-container">
                    <!-- Brand and toggle get grouped for better mobile display -->
                    <div class="navbar-header va-middle">
                        <div class="set-inline-block nav-hamburger">
                            <button type="button" class="sidebar-toggle visible-xs-inline-block" 
									data-action="toggle" data-target="body" data-toggle="menu-visible">
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <a class="graccs-logo-header" href="/">
								<img src="/assets/img/graccs-logo.svg" width="180" height="40" alt="" />
							</a>
                        </div>
                    </div>
                    <div class="va-middle section-date-helper">
                        <h4 class="pull-left page-section">
							{{#if section}}
								{{section}}
							{{/if}}
                        </h4>
                        <span class="pull-right visible-xs">{{date Date.now format='MMM YYYY'}}</span>
                    </div>
                    <div class="navbar-menu va-middle">
                        <ul id="top-menu" class="nav navbar-nav">
                            <li>
                                <a class="{{#if isIndicatorsSection}}active{{/if}}" href="/indicadores" data-placement="bottom" title="Indicadores">
                                    <i class="si si-bar-chart"></i>
                                </a>
                            </li>
                            <li>
                                <a class="{{#if isNewsSection}}active{{/if}}" href="/noticias" data-placement="bottom" title="Noticias">
                                    <i class="si si-speech"></i>
                                </a>
                            </li>
                            <li class="hidden-xs">
                                <a class="{{#if isContactSection}}active{{/if}}" href="/contacto" data-placement="bottom" title="Contacto">
                                    <i class="si si-envelope"></i>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </nav>
        <div class="container page-container">
            <!--content-->
            <!-- The content block should contain the body of your template's content-->
			{{{body}}}
            <!--content-->
        </div>
	</div>

    <footer>
        <div class="container full-height">
            <div class="row full-height">
                <div class="va-container">
                    <div class="va-middle col-md-4 col-sm-6 col-xs-12 text-center">
                        <nav>
                            <ul class="nav links friend-links">
								{{#if links}}
									{{#each links}}
                                        <li>
                                            <a href="{{url}}" class="symbol" target="_blank">{{label}}</a>
                                        </li>
									{{/each}}
								{{/if}}
                            </ul>
                        </nav>
                    </div>
                    <div class="va-middle hidden-xs hidden-sm col-md-4 text-center">
                        <div class="copyright-info">
                            <p class="text-left">Todos los derechos reservados {{date indicator.startDate format='YYYY'}} ©
                                <span class="meta-separator">|</span>
                                <a href="#">Condiciones y Políticas</a>
                            </p>
                        </div>
                    </div>
                    <div class="va-middle hidden-xs col-sm-6 col-md-3 text-center">
                        <ul class="nav links social-links">
							{{#if generalInfo}}
                                <li>
                                    <a href="{{generalInfo.facebook}}"><img src="/assets/img/icon-facebook.svg" width="28" alt=""></a>
                                </li>
                                <li>
                                    <a href="{{generalInfo.twitter}}"><img src="/assets/img/icon-twitter.svg" width="28" alt=""></a>
                                </li>
                                <li>
                                    <a href="{{generalInfo.instagram}}"><img src="/assets/img/icon-instagram.svg" width="28" alt=""></a>
                                </li>
                                <li>
                                    <a href="{{generalInfo.youtube}}"><img src="/assets/img/icon-youtube.svg" width="28" alt=""></a>
                                </li>
							{{/if}}
                        </ul>
                    </div>
                </div>
            </div>
       </div>
    </footer>

    <script type="text/javascript" src="/assets/js/jquery.min.js"></script>
	<script type="text/javascript" src="/assets/js/pace.config.js"></script>
	<script type="text/javascript" src="/assets/js/pace.min.js"></script>
	<script type="text/javascript" src="/assets/js/wow.min.js"></script>
	<script type="text/javascript" src="/assets/js/jquery.smartresize.js"></script>
	<script type="text/javascript" src="/assets/js/index.helpers.js"></script>
	<script type="text/javascript" src="/assets/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="/assets/js/bootstrap-paginator.js"></script>
	{{#if isIndicatorsSection}}
        <script type="text/javascript" src="/assets/js/select2.full.js"></script>
        <script type="text/javascript" src="/assets/js/amcharts.js"></script>
        <script type="text/javascript" src="/assets/js/serial.js"></script>
        <script type="text/javascript" src="/assets/js/jquery.barrating.min.js"></script>
	{{/if}}
	{{#if isNewsDetailsSection}}
        <script type="text/javascript" src="/assets/js/amcharts.js"></script>
        <script type="text/javascript" src="/assets/js/serial.js"></script>
        <script type="text/javascript" src="/assets/js/jquery.barrating.min.js"></script>
	{{/if}}
	{{#if isSearchSection}}
        <script type="text/javascript" src="/assets/js/jquery.barrating.min.js"></script>
	{{/if}}
    <script type="text/javascript" src="/assets/js/graccs.app.js"></script>

	{{#if isIndicatorsSection}}
        <script type="text/javascript">
            $('document').ready(function() {				
                var $set_top = $('.grid-content .set-top');
                var $set_bottom = $('.grid-content .set-bottom');

                $set_top.find('p').addClass('item-meta-desc hidden-xxs');
                $set_bottom.find('p').addClass('item-meta-desc hidden-xxs');

                $('.grid-content .item-meta-info').find('span:first-child').css('text-transform', 'uppercase');
            });
        </script>
	{{/if}}
	
	{{#if isIndicatorDetailsSection}}
        <script type="text/javascript" src="/assets/js/pdfmake.js"></script>
        <script type="text/javascript" src="/assets/js/vfs_fonts.js"></script>
		
        <script type="text/javascript">
            $(function () {
				var $departments = $('#departments');
                var $municipalities = $('#municipalities');
                var $communities = $('#communities');
                var $years = $('#years');
                var $area_types = $('#area_types');
                var $years_tab_2 = $('#years_tab_2');
                var $frequency = $('#frequency');

                var area = $('#area_id').text().trim();
                var areaParent = $('#area_parent_id').text().trim();
				var frequency_type = $('#frequency_type').text().trim();

                var indicator_id = "{{indicator._id}}";
				var title = "{{indicator.title}}";
                var slug = "{{indicator.slug}}";
                var minAreaToApply = "{{indicator.minAreaToApply}}";
                var global_points = [];
				var years = [];

                var formula = "{{indicator.formula}}";
                var realValueLabel = "{{indicator.realValue}}";
                var useDenominator = {{indicator.useDenominator}};
				var targetValueLabel = useDenominator ? "{{indicator.targetValue}}" : "";
				var areaType = {{indicator.areaNumber}};
                var areaTypeName = areaType === 3 ? 'community' : (areaType === 2 ? 'municipal' : (areaType === 1 ? 'department' : ''));

                var stockData = [
                    {
                        Symbol: "AAPL",
                        Company: "Apple Inc.",
                        Price: "132.54"
                    },
                    {
                        Symbol: "INTC",
                        Company: "Intel Corporation",
                        Price: "33.45"
                    },
                    {
                        Symbol: "GOOG",
                        Company: "Google Inc",
                        Price: "554.52"
                    },
                ];

                function convertArrayOfObjectsToCSV(args) {
                    var result, ctr, keys, columnDelimiter, lineDelimiter, data;

                    data = args.data || null;
                    if (data == null || !data.length) {
                        return null;
                    }

                    columnDelimiter = args.columnDelimiter || ',';
                    lineDelimiter = args.lineDelimiter || '\n';

                    keys = Object.keys(data[0]);

                    result = '';
                    result += keys.join(columnDelimiter);
                    result += lineDelimiter;

                    data.forEach(function(item) {
                        ctr = 0;
                        keys.forEach(function(key) {
                            if (ctr > 0) result += columnDelimiter;

                            result += item[key];
                            ctr++;
                        });
                        result += lineDelimiter;
                    });

                    return result;
                }

                window.downloadCSV = function(args) {
                    var data, filename, link;

                    var csv = convertArrayOfObjectsToCSV({
                        data: stockData
                    });
                    if (csv == null) return;

                    filename = args.filename || 'export.csv';

                    if (!csv.match(/^data:text\/csv/i)) {
                        csv = 'data:text/csv;charset=utf-8,' + csv;
                    }
                    data = encodeURI(csv);

                    link = document.createElement('a');
                    link.setAttribute('href', data);
                    link.setAttribute('download', filename);
                    link.click();
                };
				
                $('#vote-positive-button').click(function(e) {
                    e.preventDefault();

                    var $item = $(this);
                    var id = $item.data('comment-id');

                    if (id) {
                        var req = $.ajax({
                            method: 'POST',
                            url: '/post-comment/' + id + '/vote',
                            data: {vote: 1}
                        });

                        req.done(function (res) {
                            var value = parseInt($item.find('span:first-child').text()) + 1;
                            $item.find('span:first-child').text(value);
                            $item.unbind('click');
                            console.log('Comment vote updated successfully', res);
                        });

                        req.fail(function (res) {
                            console.log('Updating comment vote has failed', res);
                        });
                    }
                });

                $('#vote-negative-button').click(function(e) {
                    e.preventDefault();

                    var $item = $(this);
                    var id = $item.data('comment-id');

                    if (id) {
                        var req = $.ajax({
                            method: 'POST',
                            url: '/post-comment/' + id + '/vote',
                            data: {vote: -1}
                        });

                        req.done(function (res) {
                            var value = parseInt($item.find('span').text()) + 1;
                            $item.find('span').text(value);
                            $item.unbind('click');
                            console.log('Comment vote updated successfully', res);
                        });

                        req.fail(function (res) {
                            console.log('Updating comment vote has failed', res);
                        });
                    }
                });

                $('#vote-indicator-positive-button').click(function(e) {
                    e.preventDefault();

                    var $item = $(this);
                    var id = $item.data('comment-id');

                    if (id) {
                        var req = $.ajax({
                            method: 'POST',
                            url: '/indicator-comment/' + id,
                            data: { vote: 1 }
                        });

                        req.done(function (res) {
                            var value = parseInt($item.find('span:first-child').text()) + 1;
                            $item.find('span:first-child').text(value);
                            $item.unbind('click');
                            console.log('Comment vote updated successfully', res);
                        });

                        req.fail(function (res) {
                            console.log('Updating comment vote has failed', res);
                        });
                    }
                });

                $('#vote-indicator-negative-button').click(function(e) {
                    e.preventDefault();

                    var $item = $(this);
                    var id = $item.data('comment-id');

                    if (id) {
                        var req = $.ajax({
                            method: 'POST',
                            url: '/indicator-comment/' + id,
                            data: { vote: -1 }
                        });

                        req.done(function (res) {
                            var value = parseInt($item.find('span').text()) + 1;
                            $item.find('span').text(value);
                            $item.unbind('click');
                            console.log('Comment vote updated successfully', res);
                        });

                        req.fail(function (res) {
                            console.log('Updating comment vote has failed', res);
                        });
                    }
                });

                $('#bBuildGraph').click(function(e) {
                    $('#chartdiv').empty();
					var tab = $('#graph_tab li[class="active"] > a').data('id');
					
					if (tab === 1) {
                        var department = $departments.val();
                        var municipality = $municipalities.val();
                        var community = $communities.val();
                        var year = $years.val();

                        switch (areaType) {
                            case 1:
                                if (department)
                                    get_points(indicator_id, 'department', department, year);
                                break;
                            case 2:
                                if (municipality) {
                                    get_points(indicator_id, 'municipal', municipality, year);
                                }
                                else if (department) {
                                    get_points_by_department(indicator_id, department, year);
                                }
                                break;
                            case 3:
                                if (community) {
                                    get_points(indicator_id, 'community', community, year);
                                }
                                else {
                                    if (municipality) {
                                        get_points_by_municipality(indicator_id, municipality, year);
                                    }
                                    else if (department) {
                                        get_points_by_department_without_municipality(indicator_id, department, year);
                                    }
                                }
                                break;
                        }
					}
					else if (tab === 2) {
                        var year = $years_tab_2.val();
						var area_type = $area_types.val();
						var frequency_value = $frequency.val();
						
						get_points_two(indicator_id, year, frequency_type, frequency_value);
                    }
                });
				
				$('.form-control.select').select2({
                    theme: "bootstrap",
                    placeholder: "-- Seleccionar --",
                    allowClear: true
                });

                $('#graph_tab a:first').tab('show');

                $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                    var current_tab = e.target; // newly activated tab
                    var last_tab = e.relatedTarget; // previous active tab

                    $('.form-control.select').select2({
                        theme: "bootstrap",
                        placeholder: "-- Seleccionar --",
                        allowClear: true
                    });
				});

                $departments.change(function(e) {
                    var department = $departments.val();

                    if (department && areaType >= 2) {
                        get_municipalities(department);
                    }
					else {
                        $municipalities.html('').select2({
                            theme: "bootstrap",
                            placeholder: "-- Seleccionar --",
                            allowClear: true,
                            data: []
                        });

                        $communities.html('').select2({
                            theme: "bootstrap",
                            placeholder: "-- Seleccionar --",
                            allowClear: true,
                            data: []
                        });
                    }
                });
				
				$municipalities.change(function(e) {
                    var municipality = $municipalities.val();

                    if (municipality) {
						if (areaType === 3) get_communities(municipality);
                    }
					else {
                        $communities.html('').select2({
                            theme: "bootstrap",
                            placeholder: "-- Seleccionar --",
                            allowClear: true,
                            data: []
                        });
                    }
				});
				
                function get_initial_data() {
					var point_year = $('#point_year').text().trim();
					
                    if (indicator_id && areaTypeName != '' && area != '' && point_year) {
                        get_areas_value(area, areaParent);
                        get_graph_by_area_values();

                        $years.val(point_year).trigger("change");
                        $years_tab_2.val(point_year).trigger("change");
						
                        var req = $.ajax({
                            url: '/get-initial-data',
                            data: { indicator: indicator_id, type: areaTypeName, area: area, year: point_year }
                        });

                        req.done(function (results) {
                            console.log('Getting initial data success', results);

                            if (results) {
								if (results.points && results.points.length > 0) {
                                    $('#download-excel-button').attr('href', '/generate-csv?id='+ indicator_id +'&slug='+ slug +'&area_type='+ areaTypeName +'&area_id='+ area);
                                    build_points(results.points);
								}
                                else {
                                    $('#download-excel-button').attr('href', '/indicador/' + slug);
                                }
                            }
                        });

                        req.fail(function (res) {
                            console.log('Getting initial data has failed', res);
                        });
					}
				}

                function get_areas_value(area_id, parent_id) {
                    if (areaType === 1) {
                        $departments.val(area_id).trigger("change");
                    }
                    else if (areaType === 2) {
                        get_municipalities(parent_id, area_id);
                    }
                    else  if (areaType === 3) {
                        get_municipality(parent_id);
                    }
                }
				
				function get_graph_by_area_values() {
					var frequency = frequency_type;
					var frequency_values = [];
					
                    switch (frequency) {
                        case 'monthly':
                            frequency_values.push({ id: '1', text: 'Enero' });
                            frequency_values.push({ id: '2', text: 'Febrero' });
                            frequency_values.push({ id: '3', text: 'Marzo' });
                            frequency_values.push({ id: '4', text: 'Abril' });
                            frequency_values.push({ id: '5', text: 'Mayo' });
                            frequency_values.push({ id: '6', text: 'Junio' });
                            frequency_values.push({ id: '7', text: 'Julio' });
                            frequency_values.push({ id: '8', text: 'Agosto' });
                            frequency_values.push({ id: '9', text: 'Septiembre' });
                            frequency_values.push({ id: '10', text: 'Octubre' });
                            frequency_values.push({ id: '11', text: 'Noviembre' });
                            frequency_values.push({ id: '12', text: 'Diciembre' });
                            break;
                        case 'quarterly':
                            frequency_values.push({ id: '1', text: 'I Trimestre' });
                            frequency_values.push({ id: '2', text: 'II Trimestre' });
                            frequency_values.push({ id: '3', text: 'III Trimestre' });
                            frequency_values.push({ id: '4', text: 'IV Trimestre' });
                            break;
                        case 'biannual':
                            frequency_values.push({ id: '1', text: 'I Semestre' });
                            frequency_values.push({ id: '2', text: 'II Semestre' });
                            break;
                    }

                    $frequency.html('').select2({
                        theme: "bootstrap",
                        placeholder: "-- Seleccionar --",
                        allowClear: true,
                        data: frequency_values
                    });

                    $area_types.val(minAreaToApply).trigger("change");
                }

                function get_municipalities(parent, municipality) {
                    if (parent) {
                        var req = $.ajax({
                            url: '/get-municipalities',
                            data: { parent: parent }
                        });

                        req.done(function (results) {
                            console.log('Getting municipalities successfully: ', results);

                            if (results && results.data && results.data.length > 0) {
                                var data = [];
								
                                $.each(results.data, function (key,val) {
									data.push({ id: val._id, text: val.name });
                                });

                                $municipalities.html('').select2({
                                    theme: "bootstrap",
                                    placeholder: "-- Seleccionar --",
                                    allowClear: true,
                                    data: data
                                });
								
								if (municipality) {
									$municipalities.val(municipality).trigger("change");
                                    get_communities(municipality);
                                }
								else {
									municipality = $municipalities.val();
                                    get_communities(municipality);
                                }
                            }
                        });

                        req.fail(function (res) {
                            console.log('Getting municipalities has failed', res);
                        });
                    }
                }

                function get_municipality(municipality) {
                    if (municipality) {
                        var req = $.ajax({
                            url: '/get-municipality',
                            data: { id: municipality }
                        });

                        req.done(function (results) {
                            console.log('Getting municipality successfully: ', results);

                            if (results && results.related_municipal_areas && results.related_municipal_areas.length > 0) {
                                var data = [];

                                $.each(results.related_municipal_areas, function (key,val) {
                                    data.push({ id: val._id, text: val.name });
                                });

                                $municipalities.html('').select2({
                                    theme: "bootstrap",
                                    placeholder: "-- Seleccionar --",
                                    allowClear: true,
                                    data: data
                                });
								
								$municipalities.val(municipality).trigger("change");
								get_communities(municipality);
								
                                if (results.municipal_area) $departments.val(results.municipal_area.parent).trigger("change");
                            }
                        });

                        req.fail(function (res) {
                            console.log('Getting municipalities has failed', res);
                        });
                    }
                }

                function get_communities(parent, community) {
					if (parent) {
                        var req = $.ajax({
                            url: '/get-communities',
                            data: { parent: parent }
                        });

                        req.done(function (results) {
                            console.log('Getting communities successfully: ', results);

                            if (results && results.data && results.data.length > 0) {
                                var data = [];
                                var selected_option = '';

                                $.each(results.data, function (key,val) {
                                    data.push({ id: val._id, text: val.name });
                                    if (community) selected_option = val._id;
                                });

                                $communities.html('').select2({
                                    theme: "bootstrap",
                                    placeholder: "-- Seleccionar --",
                                    allowClear: true,
                                    data: data
                                });

                                if (selected_option) $communities.value = selected_option;
                            }
                        });

                        req.fail(function (res) {
                            console.log('Getting communities has failed', res);
                        });	
					}
				}
				
                function get_points(indicator, type, area, year) {
                    if (indicator && type && area && year) {
                        var req = $.ajax({
                            url: '/get-points',
                            data: { area_type: type, area_id: area, indicator_id: indicator, year: year }
                        });

                        req.done(function (results) {
                            if (results && results.points && results.points.length > 0) {
								$('#download-excel-button').attr('href', '/generate-csv?id='+ indicator_id +'&slug='+ slug +'&area_type='+ type +'&area_id='+ area);
                                build_points(results.points);
                            }
							else {
                                $('#download-excel-button').attr('href', '/indicador/' + slug);
                            }
                        });

                        req.fail(function (res) {
                            console.log('Getting points has failed', res);
                        });
                    }
                }

                function get_points_two(indicator, year, frequency_type, frequency_value) {
                    if (indicator && year && frequency_type && frequency_value) {
                        var req = $.ajax({
                            url: '/get-points-two',
                            data: { indicator_id: indicator, year: year, frequency_type: frequency_type, frequency_value: frequency_value }
                        });

                        req.done(function (results) {
                            console.log('Getting points successed', results);

                            if (results && results.points && results.points.length > 0) {
								
                            }
                        });

                        req.fail(function (res) {
                            console.log('Getting points has failed', res);
                        });
                    }
                }

                function get_points_by_municipality(indicator, municipality, year) {
                    if (indicator && municipality && year) {
                        var req = $.ajax({
                            url: '/get-points-by-municipality',
                            data: { indicator_id: indicator, municipality_id: municipality, year: year }
                        });

                        req.done(function (results) {
                            if (results && results.points_array && results.points_array.length > 0) {
                                var years = [];
                                var realValues = [];
                                var realValuesCount = [];
                                var targetValues = [];
                                var targetValuesCount = [];
                                var comparativeValues = [];
                                var comparativeValuesCount = [];
                                var points = [];
								
								$.each(results.points_array, function(key, points) {
									$.each(points, function(key_1, point) {
                                        var year = '';

                                        if (point.isMonthlyFrequency) {
                                            var month = '';

                                            switch (parseInt(point.monthlyFrequency)) {
                                                case 1:
                                                    month = 'Enero';
                                                    break;
                                                case 2:
                                                    month = 'Febrero';
                                                    break;
                                                case 3:
                                                    month = 'Marzo';
                                                    break;
                                                case 4:
                                                    month = 'Abril';
                                                    break;
                                                case 5:
                                                    month = 'Mayo';
                                                    break;
                                                case 6:
                                                    month = 'Junio';
                                                    break;
                                                case 7:
                                                    month = 'Julio';
                                                    break;
                                                case 8:
                                                    month = 'Agosto';
                                                    break;
                                                case 9:
                                                    month = 'Septiembre';
                                                    break;
                                                case 10:
                                                    month = 'Octubre';
                                                    break;
                                                case 11:
                                                    month = 'Noviembre';
                                                    break;
                                                case 12:
                                                    month = 'Diciembre';
                                                    break;
                                            }

                                            year = month + ' ' + point.startYear;
                                        }
                                        else if (point.isQuarterlyFrequency) {
                                            var quarter = '';

                                            switch (parseInt(point.quarterlyFrequency)) {
                                                case 1:
                                                    quarter = 'I Trimestre';
                                                    break;
                                                case 2:
                                                    quarter = 'II Trimestre';
                                                    break;
                                                case 3:
                                                    quarter = 'III Trimestre';
                                                    break;
                                                case 4:
                                                    quarter = 'IV Trimestre';
                                                    break;
                                            }

                                            year = quarter + ' ' + point.startYear;
                                        }
                                        else if (point.isBiannualFrequency) {
                                            var biannual = '';

                                            switch (parseInt(point.biannualFrequency)) {
                                                case 1:
                                                    biannual = 'I Semestre';
                                                    break;
                                                case 2:
                                                    biannual = 'II Semestre';
                                                    break;
                                            }

                                            year = biannual + ' ' + point.startYear;
                                        }
                                        else {
                                            year = point.startYear;
                                        }

                                        if (years.indexOf(year) === -1) years.push(year);

                                        if (!realValues[year]) {
                                            realValues[year] = point.realValue;
                                            realValuesCount[year] = 1;
                                        }
                                        else {
                                            realValues[year] += point.realValue;
                                            realValuesCount[year]++;
                                        }

                                        if (!targetValues[year]) {
                                            targetValues[year] = point.targetValue;
                                            targetValuesCount[year] = 1;
                                        }
                                        else {
                                            targetValues[year] += point.targetValue;
                                            targetValuesCount[year]++;
                                        }

                                        if (!comparativeValues[year]) {
                                            comparativeValues[year] = point.comparativeValue;
                                            comparativeValuesCount[year] = 1;
                                        }
                                        else {
                                            comparativeValues[year] += point.comparativeValue;
                                            comparativeValuesCount[year]++;
                                        }
									});
                                });
								
								$.each(years, function(key, year) {
									var point;

                                    var real_value = formula === 'sum' ? realValues[year] : (realValuesCount[year] != 0 ? realValues[year] / realValuesCount[year] : 0);
                                    var comparative_value = formula === 'sum' ? comparativeValues[year] : (comparativeValuesCount[year] != 0 ? comparativeValues[year] / comparativeValuesCount[year] : 0);
									
                                    if (useDenominator) {
                                        var target_value = formula === 'sum' ? targetValues[year] : (targetValuesCount[year] != 0 ? targetValues[year] / targetValuesCount[year] : 0);

                                        point = { "year": year, "value": real_value, "value_2": target_value, "value_3": comparative_value,
                                            "percent": targetValues[year] !== 0 ? "<br />Representa: " + Number((realValues[year] / targetValues[year]) * 100).toPrecision(4) + "%" : "" };
                                    }
                                    else {
                                        point = { "year": year, "value": real_value, "value_3": comparative_value,
                                            "percent": comparativeValues[year] !== 0 ? "<br />Representa: " + Number((realValues[year] / targetValues[year]) * 100).toPrecision(4) + "%" : ""};
                                    }

                                    points.push(point);
								});

                                if (useDenominator) {
                                    $('.indicator-value').html(Number(points[points.length - 1].value_2 - points[points.length - 1].value).toPrecision(2));
                                    drawGraph(points);
                                }
                                else {
                                    $('.indicator-value').html(Number(points[points.length - 1].value_3 - points[points.length - 1].value).toPrecision(2));
                                    drawGraphOneLine(points);
                                }
                            }
                        });

                        req.fail(function (res) {
                            console.log('Getting points by municipality has failed', res);
                        });
                    }
                }
				
				function get_points_by_department(indicator, department, year) {
                    if (indicator && department && year) {
                        var req = $.ajax({
                            url: '/get-points-by-department',
                            data: { indicator_id: indicator, department_id: department, year: year }
                        });

                        req.done(function (results) {
                            if (results && results.points_array && results.points_array.length > 0) {
                                var years = [];
                                var realValues = [];
								var realValuesCount = [];
                                var targetValues = [];
                                var targetValuesCount = [];
                                var comparativeValues = [];
                                var comparativeValuesCount = [];
                                var points = [];

                                $.each(results.points_array, function(key, points) {
                                    $.each(points, function(key_1, point) {
                                        var year = '';

                                        if (point.isMonthlyFrequency) {
                                            var month = '';

                                            switch (parseInt(point.monthlyFrequency)) {
                                                case 1:
                                                    month = 'Enero';
                                                    break;
                                                case 2:
                                                    month = 'Febrero';
                                                    break;
                                                case 3:
                                                    month = 'Marzo';
                                                    break;
                                                case 4:
                                                    month = 'Abril';
                                                    break;
                                                case 5:
                                                    month = 'Mayo';
                                                    break;
                                                case 6:
                                                    month = 'Junio';
                                                    break;
                                                case 7:
                                                    month = 'Julio';
                                                    break;
                                                case 8:
                                                    month = 'Agosto';
                                                    break;
                                                case 9:
                                                    month = 'Septiembre';
                                                    break;
                                                case 10:
                                                    month = 'Octubre';
                                                    break;
                                                case 11:
                                                    month = 'Noviembre';
                                                    break;
                                                case 12:
                                                    month = 'Diciembre';
                                                    break;
                                            }

                                            year = month + ' ' + point.startYear;
                                        }
                                        else if (point.isQuarterlyFrequency) {
                                            var quarter = '';

                                            switch (parseInt(point.quarterlyFrequency)) {
                                                case 1:
                                                    quarter = 'I Trimestre';
                                                    break;
                                                case 2:
                                                    quarter = 'II Trimestre';
                                                    break;
                                                case 3:
                                                    quarter = 'III Trimestre';
                                                    break;
                                                case 4:
                                                    quarter = 'IV Trimestre';
                                                    break;
                                            }

                                            year = quarter + ' ' + point.startYear;
                                        }
                                        else if (point.isBiannualFrequency) {
                                            var biannual = '';

                                            switch (parseInt(point.biannualFrequency)) {
                                                case 1:
                                                    biannual = 'I Semestre';
                                                    break;
                                                case 2:
                                                    biannual = 'II Semestre';
                                                    break;
                                            }

                                            year = biannual + ' ' + point.startYear;
                                        }
                                        else {
                                            year = point.startYear;
                                        }

                                        if (years.indexOf(year) === -1) years.push(year);

                                        if (!realValues[year]) {
                                            realValues[year] = point.realValue;
											realValuesCount[year] = 1;
                                        }
                                        else {
                                            realValues[year] += point.realValue;
                                            realValuesCount[year]++;
                                        }

                                        if (!targetValues[year]) {
                                            targetValues[year] = point.targetValue;
                                            targetValuesCount[year] = 1;
                                        }
                                        else {
                                            targetValues[year] += point.targetValue;
                                            targetValuesCount[year]++;
                                        }

                                        if (!comparativeValues[year]) {
                                            comparativeValues[year] = point.comparativeValue;
                                            comparativeValuesCount[year] = 1;
                                        }
                                        else {
                                            comparativeValues[year] += point.comparativeValue;
                                            comparativeValuesCount[year]++;
                                        }
                                    });
                                });

                                $.each(years, function(key, year) {
                                    var point;
									var real_value = formula === 'sum' ? realValues[year] : (realValuesCount[year] != 0 ? realValues[year] / realValuesCount[year] : 0);
                                    var comparative_value = formula === 'sum' ? comparativeValues[year] : (comparativeValuesCount[year] != 0 ? comparativeValues[year] / comparativeValuesCount[year] : 0);
                                    
									if (useDenominator) {
                                        var target_value = formula === 'sum' ? targetValues[year] : (targetValuesCount[year] != 0 ? targetValues[year] / targetValuesCount[year] : 0);

                                        point = { "year": year, "value": real_value, "value_2": target_value, "value_3": comparative_value,
                                            "percent": targetValues[year] !== 0 ? "<br />Representa: " + Number((realValues[year] / targetValues[year]) * 100).toPrecision(4) + "%" : "" };
                                    }
                                    else {
                                        point = { "year": year, "value": real_value, "value_3": comparative_value,
                                            "percent": comparativeValues[year] !== 0 ? "<br />Representa: " + Number((realValues[year] / targetValues[year]) * 100).toPrecision(4) + "%" : ""};
                                    }

                                    points.push(point);
                                });

                                if (useDenominator) {
                                    $('.indicator-value').html(Number(points[points.length - 1].value_2 - points[points.length - 1].value).toPrecision(2));
                                    drawGraph(points);
                                }
                                else {
                                    $('.indicator-value').html(Number(points[points.length - 1].value_3 - points[points.length - 1].value).toPrecision(2));
                                    drawGraphOneLine(points);
                                }
                            }
                        });

                        req.fail(function (res) {
                            console.log('Getting points by department has failed', res);
                        });
                    }
                }
				
				function get_points_by_department_without_municipality(indicator, department, year) {
                    if (indicator && department && year) {
                        var req = $.ajax({
                            url: '/get-points-by-department-without-municipality',
                            data: { indicator_id: indicator, department_id: department, year: year }
                        });

                        req.done(function (results) {
                            console.log('Getting points by department successfully: ', results);

                            if (results && results.points_array && results.points_array.length > 0) {
                                var years = [];
                                var realValues = [];
                                var realValuesCount = [];
                                var targetValues = [];
                                var targetValuesCount = [];
                                var comparativeValues = [];
                                var comparativeValuesCount = [];
                                var points = [];

                                $.each(results.points_array, function(key, points) {
                                    $.each(points, function(key_1, point) {
                                        var year = '';

                                        if (point.isMonthlyFrequency) {
                                            var month = '';

                                            switch (parseInt(point.monthlyFrequency)) {
                                                case 1:
                                                    month = 'Enero';
                                                    break;
                                                case 2:
                                                    month = 'Febrero';
                                                    break;
                                                case 3:
                                                    month = 'Marzo';
                                                    break;
                                                case 4:
                                                    month = 'Abril';
                                                    break;
                                                case 5:
                                                    month = 'Mayo';
                                                    break;
                                                case 6:
                                                    month = 'Junio';
                                                    break;
                                                case 7:
                                                    month = 'Julio';
                                                    break;
                                                case 8:
                                                    month = 'Agosto';
                                                    break;
                                                case 9:
                                                    month = 'Septiembre';
                                                    break;
                                                case 10:
                                                    month = 'Octubre';
                                                    break;
                                                case 11:
                                                    month = 'Noviembre';
                                                    break;
                                                case 12:
                                                    month = 'Diciembre';
                                                    break;
                                            }

                                            year = month + ' ' + point.startYear;
                                        }
                                        else if (point.isQuarterlyFrequency) {
                                            var quarter = '';

                                            switch (parseInt(point.quarterlyFrequency)) {
                                                case 1:
                                                    quarter = 'I Trimestre';
                                                    break;
                                                case 2:
                                                    quarter = 'II Trimestre';
                                                    break;
                                                case 3:
                                                    quarter = 'III Trimestre';
                                                    break;
                                                case 4:
                                                    quarter = 'IV Trimestre';
                                                    break;
                                            }

                                            year = quarter + ' ' + point.startYear;
                                        }
                                        else if (point.isBiannualFrequency) {
                                            var biannual = '';

                                            switch (parseInt(point.biannualFrequency)) {
                                                case 1:
                                                    biannual = 'I Semestre';
                                                    break;
                                                case 2:
                                                    biannual = 'II Semestre';
                                                    break;
                                            }

                                            year = biannual + ' ' + point.startYear;
                                        }
                                        else {
                                            year = point.startYear;
                                        }

                                        if (years.indexOf(year) === -1) years.push(year);

                                        if (!realValues[year]) {
                                            realValues[year] = point.realValue;
                                            realValuesCount[year] = 1;
                                        }
                                        else {
                                            realValues[year] += point.realValue;
                                            realValuesCount[year]++;
                                        }

                                        if (!targetValues[year]) {
                                            targetValues[year] = point.targetValue;
                                            targetValuesCount[year] = 1;
                                        }
                                        else {
                                            targetValues[year] += point.targetValue;
                                            targetValuesCount[year]++;
                                        }

                                        if (!comparativeValues[year]) {
                                            comparativeValues[year] = point.comparativeValue;
                                            comparativeValuesCount[year] = 1;
                                        }
                                        else {
                                            comparativeValues[year] += point.comparativeValue;
                                            comparativeValuesCount[year]++;
                                        }
                                    });
                                });

                                $.each(years, function(key, year) {
                                    var point;
                                    var real_value = formula === 'sum' ? realValues[year] : (realValuesCount[year] != 0 ? realValues[year] / realValuesCount[year] : 0);
                                    var comparative_value = formula === 'sum' ? comparativeValues[year] : (comparativeValuesCount[year] != 0 ? comparativeValues[year] / comparativeValuesCount[year] : 0);

                                    if (useDenominator) {
                                        var target_value = formula === 'sum' ? targetValues[year] : (targetValuesCount[year] != 0 ? targetValues[year] / targetValuesCount[year] : 0);

                                        point = { "year": year, "value": real_value, "value_2": target_value, "value_3": comparative_value,
                                            "percent": targetValues[year] !== 0 ? "<br />Representa: " + Number((realValues[year] / targetValues[year]) * 100).toPrecision(4) + "%" : "" };
                                    }
                                    else {
                                        point = { "year": year, "value": real_value, "value_3": comparative_value,
                                            "percent": comparativeValues[year] !== 0 ? "<br />Representa: " + Number((realValues[year] / targetValues[year]) * 100).toPrecision(4) + "%" : ""};
                                    }

                                    points.push(point);
                                });

                                if (useDenominator) {
                                    $('.indicator-value').html(Number(points[points.length - 1].value_2 - points[points.length - 1].value).toPrecision(2));
                                    drawGraph(points);
                                }
                                else {
                                    $('.indicator-value').html(Number(points[points.length - 1].value_3 - points[points.length - 1].value).toPrecision(2));
                                    drawGraphOneLine(points);
                                }
                            }
                        });

                        req.fail(function (res) {
                            console.log('Getting points by department has failed', res);
                        });
                    }
                }

                function build_points(data_points) {
                    if (data_points && data_points.length > 0) {
                        var points = [];

                        for (var i = 0; i < data_points.length; i++) {
                            var point = null;
                            var year = '';

                            if (data_points[i].isMonthlyFrequency) {
                                var month = '';

                                switch (parseInt(data_points[i].monthlyFrequency)) {
                                    case 1:
                                        month = 'Enero';
                                        break;
                                    case 2:
                                        month = 'Febrero';
                                        break;
                                    case 3:
                                        month = 'Marzo';
                                        break;
                                    case 4:
                                        month = 'Abril';
                                        break;
                                    case 5:
                                        month = 'Mayo';
                                        break;
                                    case 6:
                                        month = 'Junio';
                                        break;
                                    case 7:
                                        month = 'Julio';
                                        break;
                                    case 8:
                                        month = 'Agosto';
                                        break;
                                    case 9:
                                        month = 'Septiembre';
                                        break;
                                    case 10:
                                        month = 'Octubre';
                                        break;
                                    case 11:
                                        month = 'Noviembre';
                                        break;
                                    case 12:
                                        month = 'Diciembre';
                                        break;
                                }

                                year = month + ' ' + data_points[i].startYear;
                            }
                            else if (data_points[i].isQuarterlyFrequency) {
                                var quarter = '';

                                switch (parseInt(data_points[i].quarterlyFrequency)) {
                                    case 1:
                                        quarter = 'I Trimestre';
                                        break;
                                    case 2:
                                        quarter = 'II Trimestre';
                                        break;
                                    case 3:
                                        quarter = 'III Trimestre';
                                        break;
                                    case 4:
                                        quarter = 'IV Trimestre';
                                        break;
                                }

                                year = quarter + ' ' + data_points[i].startYear;
                            }
                            else if (data_points[i].isBiannualFrequency) {
                                var biannual = '';

                                switch (parseInt(data_points[i].biannualFrequency)) {
                                    case 1:
                                        biannual = 'I Semestre';
                                        break;
                                    case 2:
                                        biannual = 'II Semestre';
                                        break;
                                }

                                year = biannual + ' ' + data_points[i].startYear;
                            }
                            else {
                                year = data_points[i].startYear;
                            }

                            if (useDenominator) {
                                point = {
                                    "year": year,
                                    "value": data_points[i].realValue,
                                    "value_2": data_points[i].targetValue,
                                    "value_3": data_points[i].comparativeValue ? data_points[i].comparativeValue : 0,
                                    "percent": data_points[i].targetValue !== 0 ? "<br />Representa: " + Number((data_points[i].realValue / data_points[i].targetValue) * 100).toPrecision(4) + "%" : ""
                                };
                            }
                            else {
                                point = {
                                    "year": year, "value": data_points[i].realValue,
                                    "value_3": data_points[i].comparativeValue ? data_points[i].comparativeValue : 0,
                                    "percent": data_points[i].targetValue !== 0 ? "<br />Representa: " + Number((data_points[i].realValue / data_points[i].targetValue) * 100).toPrecision(4) + "%" : ""
                                };
                            }

                            points.push(point);
                        }

                        if (useDenominator) {
                            $('.indicator-value').html(Number(points[points.length - 1].value_2 - points[points.length - 1].value).toPrecision(2));
                            drawGraph(points);
                        }
                        else {
                            $('.indicator-value').html(Number(points[points.length - 1].value_3 - points[points.length - 1].value).toPrecision(2));
                            drawGraphOneLine(points);
                        }
						
						global_points = points;
						console.log('global_points: ', global_points);
                    }
                }
				
                function drawGraphOneLine(points) {
                    var chart;
                    var graph, graph_3;

                    // SERIAL CHART
                    chart = new AmCharts.AmSerialChart();

                    chart.dataProvider = points;
                    chart.marginLeft = 10;
                    chart.categoryField = "year";

                    // AXES
                    // category
                    var categoryAxis = chart.categoryAxis;
                    categoryAxis.dashLength = 3;
                    categoryAxis.minorGridEnabled = true;
                    categoryAxis.minorGridAlpha = 0.1;

                    // value
                    var valueAxis = new AmCharts.ValueAxis();
                    valueAxis.axisAlpha = 0;
                    valueAxis.inside = true;
                    valueAxis.dashLength = 3;
                    chart.addValueAxis(valueAxis);

                    // GRAPH
                    graph = new AmCharts.AmGraph();
                    graph.type = "column"; // this line makes the graph smoothed line.
                    graph.title = realValueLabel ? realValueLabel : "Valor real";
                    graph.valueField = "value";
                    graph.lineColor = "#FFA92E";
                    graph.lineAlpha = 1;
                    graph.fillAlphas = 1;
                    graph.dashLengthField = "dashLengthColumn";
                    graph.alphaField = "alpha";
                    graph.balloonText = "<span style='font-size:13px;'>[[title]] en [[category]]:<b>[[value]]</b> [[percent]]</span>";
                    chart.addGraph(graph);

                    graph_3 = new AmCharts.AmGraph();
                    graph_3.type = "smoothedLine"; // this line makes the graph smoothed line.
                    graph_3.title = "Valor comparativo";
                    graph_3.lineColor = "#76AF25";
                    graph_3.negativeLineColor = "#678B0D"; // this line makes the graph to change color when it drops below 0
                    graph_3.bullet = "round";
                    graph_3.bulletSize = 8;
                    graph_3.bulletBorderColor = "#FFFFFF";
                    graph_3.bulletBorderAlpha = 1;
                    graph_3.bulletBorderThickness = 2;
                    graph_3.lineThickness = 2;
                    graph_3.valueField = "value_3";
                    graph_3.balloonText = "<span style='font-size:13px;'>[[title]] en [[category]]:<b>[[value]]</b> [[additional]]</span>";
                    chart.addGraph(graph_3);
					
                    // CURSOR
                    /*  var chartCursor = new AmCharts.ChartCursor();
                        chartCursor.cursorAlpha = 0;
                        chartCursor.cursorPosition = "mouse";
                        chartCursor.categoryBalloonDateFormat = "YYYY";
                        chart.addChartCursor(chartCursor);*/

                    // SCROLLBAR
                    /*  var chartScrollbar = new AmCharts.ChartScrollbar();
                        chart.addChartScrollbar(chartScrollbar);*/

                    // LEGEND
                    var legend = new AmCharts.AmLegend();
                    legend.marginLeft = 110;
                    legend.useGraphSettings = true;
                    chart.addLegend(legend);

                    chart.creditsPosition = "bottom-right";

                    // WRITE
                    chart.write("chartdiv");
                    $('.amChartsLegend.amcharts-legend-div').css('margin-top', '18px');
                }

                function drawGraph(points) {
                    var chart;
                    var graph, graph_2, graph_3;

                    // SERIAL CHART
                    chart = new AmCharts.AmSerialChart();

                    chart.dataProvider = points;
                    chart.marginLeft = 30;
                    chart.categoryField = "year";
                    chart.startDuration = 1;

                    // AXES
                    // category
                    var categoryAxis = chart.categoryAxis;
                    categoryAxis.gridPosition = "start";

                    // value
                    var valueAxis = new AmCharts.ValueAxis();
                    valueAxis.axisAlpha = 0;
                    chart.addValueAxis(valueAxis);

                    // GRAPH
                    graph = new AmCharts.AmGraph();
                    graph.type = "column"; // this line makes the graph smoothed line.
                    graph.title = realValueLabel ? realValueLabel : "Valor real";
                    graph.valueField = "value";
                    graph.lineColor = "#FFA92E";
                    graph.lineAlpha = 1;
                    graph.fillAlphas = 1;
                    graph.dashLengthField = "dashLengthColumn";
                    graph.alphaField = "alpha";
                    graph.balloonText = "<span style='font-size:13px;'>[[title]] en [[category]]:<b>[[value]]</b> [[percent]]</span>";
                    chart.addGraph(graph);

                    // GRAPH
                    graph_2 = new AmCharts.AmGraph();
                    graph_2.type = "column"; // this line makes the graph smoothed line.
                    graph_2.title = targetValueLabel ? targetValueLabel : "Valor planificado";
                    graph_2.valueField = "value_2";
                    graph_2.lineColor = "#162A59";
                    graph_2.lineAlpha = 1;
                    graph_2.fillAlphas = 1;
                    graph_2.dashLengthField = "dashLengthColumn";
                    graph_2.alphaField = "alpha";
                    graph_2.balloonText = "<span style='font-size:13px;'>[[title]] en [[category]]:<b>[[value]]</b> [[additional]]</span>";
                    chart.addGraph(graph_2);

                    graph_3 = new AmCharts.AmGraph();
                    graph_3.type = "smoothedLine"; // this line makes the graph smoothed line.
                    graph_3.title = "Valor comparativo";
                    graph_3.lineColor = "#76AF25";
                    graph_3.negativeLineColor = "#678B0D"; // this line makes the graph to change color when it drops below 0
                    graph_3.bullet = "round";
                    graph_3.bulletSize = 8;
                    graph_3.bulletBorderColor = "#FFFFFF";
                    graph_3.bulletBorderAlpha = 1;
                    graph_3.bulletBorderThickness = 2;
                    graph_3.lineThickness = 2;
                    graph_3.valueField = "value_3";
                    graph_3.balloonText = "<span style='font-size:13px;'>[[title]] en [[category]]:<b>[[value]]</b> [[additional]]</span>";
                    chart.addGraph(graph_3);

                    // CURSOR
                    /*  var chartCursor = new AmCharts.ChartCursor();
                        chartCursor.cursorAlpha = 0;
                        chartCursor.cursorPosition = "mouse";
                        chartCursor.categoryBalloonDateFormat = "YYYY";
                        chart.addChartCursor(chartCursor);*/

                    // SCROLLBAR
                    /*  var chartScrollbar = new AmCharts.ChartScrollbar();
                        chart.addChartScrollbar(chartScrollbar);*/

                    // LEGEND
                    var legend = new AmCharts.AmLegend();
                    legend.marginLeft = 110;
                    legend.useGraphSettings = true;
                    chart.addLegend(legend);

                    chart.creditsPosition = "bottom-right";

                    // WRITE
                    chart.write("chartdiv");
					$('.amChartsLegend.amcharts-legend-div').css('margin-top', '18px');
                }
				
                get_initial_data();
            });
        </script>
	{{/if}}
	
	{{#if isNewsSection}}
        <script type="text/javascript" src="/assets/js/news.helpers.js"></script>
        <script type="text/javascript">
			$('document').ready(function() {
				var $set_top = $('.grid-news .set-top');
				
				$set_top.find('h2')
						.addClass('dotted-wrap')
                        .css('text-transform', 'uppercase');
				
				$('.grid-news .item-meta-info').find('span:first-child').css('text-transform', 'uppercase');
            });
		</script>
	{{/if}}
</body>
</html>
