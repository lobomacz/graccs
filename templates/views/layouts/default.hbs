<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1 user-scalable=no" />
    <meta name="description" content="Sistema de información y Comunicación Regional" />
    <meta name="author" content="Casabe" />
    <meta name="keywords" content="" />
    <link rel="icon" type="image/ico" href="/favicon.ico" />

    <title>{{generalInfo.title}} | Sistema de información y Comunicación Regional</title>

    <!-- styles -->
    <link href="/assets/css/bootstrap.min.css" rel="stylesheet" media="screen" />
    <link href="/assets/css/pace-theme-minimal.css" rel="stylesheet" media="screen" />
    <link href="/assets/css/lato.css" rel="stylesheet" media="screen" />
    <link href="/assets/css/bebas.css" rel="stylesheet" media="screen">
    <link href="/assets/css/bootstrap.helpers.css" rel="stylesheet" media="screen" />
    <link href="/assets/css/animate.min.css" rel="stylesheet" media="screen" />
    <link href="/assets/css/graccs.theme.css" rel="stylesheet" media="screen" />
	{{#if hashero}}
        <link href="/assets/css/graccs.hero.css" rel="stylesheet" media="screen" />
	{{/if}}
	{{#if isContactSection}}
        <link href="/assets/css/graccs.contact.css" rel="stylesheet" media="screen" />
	{{/if}}
	{{#if isNewsSection}}
        <link href="/assets/css/graccs.grid.news.css" rel="stylesheet" media="screen" />
	{{/if}}
	{{#if isIndicatorsSection}}
        <link href="/assets/css/select2.css" rel="stylesheet" media="screen" />
        <link href="/assets/css/select2-bootstrap.css" rel="stylesheet" media="screen" />
        <link href="/assets/css/css-stars.css" rel="stylesheet" media="screen" />
        <link href="/assets/css/graccs.article.common.css" rel="stylesheet" media="screen" />
        <link href="/assets/css/graccs.indicator.css" rel="stylesheet" media="screen" />
	{{/if}}
	{{#if isNewsDetailsSection}}
        <link href="/assets/css/css-stars.css" rel="stylesheet" media="screen" />
        <link href="/assets/css/graccs.article.common.css" rel="stylesheet" media="screen" />
        <link href="/assets/css/graccs.news.css" rel="stylesheet" media="screen" />
	{{/if}}
	{{#if isSearchSection}}
        <link href="/assets/css/css-stars.css" rel="stylesheet" media="screen" />
        <link href="/assets/css/graccs.article.common.css" rel="stylesheet" media="screen" />
        <link href="/assets/css/graccs.search.css" rel="stylesheet" media="screen" />
	{{/if}}
</head>
<body>
	<div id="page">
        <div class="background-fill"></div>
		{{#if hashero}}
			<section class="hero">
                <div class="container">
                    <div class="graccs-logo wow fadeInLeft">
                        <img src="/assets/img/graccs-logo.svg" width="230" height="50" alt="" />
                    <span>
						{{#if generalInfo}}
							{{{generalInfo.heroSubtitle}}}
						{{/if}}
                    </span>
                        <img class="push-action" src="/assets/img/action-button.svg" width="50" />
                    </div>
                    <div class="hero-notice">
                        <div class="content-wrapper ">
                            <div>
								{{#if generalInfo}}
									{{generalInfo.heroDescription}}
								{{/if}}
                                <nav class="hidden-xs hidden-sm">
                                    <ul class="nav links friend-links">
										{{#if links}}
											{{#each links}}
                                                <li>
                                                    <a href="{{url}}" class="symbol" target="_blank">{{label}}</a>
                                                </li>
											{{/each}}
										{{/if}}
                                    </ul>
                                </nav>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
		{{/if}}
        <nav id="headroom" class="navbar navbar-fixed-top" role="navigation">
            <div class="container">
                <div class="navbar-wrapper va-container">
                    <!-- Brand and toggle get grouped for better mobile display -->
                    <div class="navbar-header va-middle">
                        <div class="set-inline-block nav-hamburger">
                            <button type="button" class="sidebar-toggle visible-xs-inline-block" 
									data-action="toggle" data-target="body" data-toggle="menu-visible">
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                                <span class="icon-bar"></span>
                            </button>
                            <a class="graccs-logo-header" href="/">
								<img src="/assets/img/graccs-logo.svg" width="180" height="40" alt="" />
							</a>
                        </div>
                    </div>
                    <div class="va-middle section-date-helper">
                        <h4 class="pull-left page-section">
							{{#if section}}
								{{section}}
							{{/if}}
                        </h4>
                        <span class="pull-right visible-xs">{{date Date.now format='MMM YYYY'}}</span>
                    </div>
                    <div class="navbar-menu va-middle">
                        <ul id="top-menu" class="nav navbar-nav">
                            <li>
                                <a class="{{#if isIndicatorsSection}}active{{/if}}" href="/indicadores" data-placement="bottom" title="Indicadores">
                                    <i class="si si-bar-chart"></i>
                                </a>
                            </li>
                            <li>
                                <a class="{{#if isNewsSection}}active{{/if}}" href="/noticias" data-placement="bottom" title="Noticias">
                                    <i class="si si-speech"></i>
                                </a>
                            </li>
                            <li class="hidden-xs">
                                <a class="{{#if isContactSection}}active{{/if}}" href="/contacto" data-placement="bottom" title="Contacto">
                                    <i class="si si-envelope"></i>
                                </a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </nav>
        <div class="container page-container">
            <!--content-->
            <!-- The content block should contain the body of your template's content-->
			{{{body}}}
            <!--content-->
        </div>
	</div>

    <footer>
        <div class="container full-height">
            <div class="row full-height">
                <div class="va-container">
                    <div class="va-middle col-md-4 col-sm-6 col-xs-12 text-center">
                        <nav>
                            <ul class="nav links friend-links">
								{{#if links}}
									{{#each links}}
                                        <li>
                                            <a href="{{url}}" class="symbol" target="_blank">{{label}}</a>
                                        </li>
									{{/each}}
								{{/if}}
                            </ul>
                        </nav>
                    </div>
                    <div class="va-middle hidden-xs hidden-sm col-md-4 text-center">
                        <div class="copyright-info">
                            <p class="text-left">Todos los derechos reservados {{date indicator.startDate format='YYYY'}} ©
                                <span class="meta-separator">|</span>
                                <a href="#">Condiciones y Políticas</a>
                            </p>
                        </div>
                    </div>
                    <div class="va-middle hidden-xs col-sm-6 col-md-3 text-center">
                        <ul class="nav links social-links">
							{{#if generalInfo}}
                                <li>
                                    <a href="{{generalInfo.facebook}}"><img src="/assets/img/icon-facebook.svg" width="28" alt=""></a>
                                </li>
                                <li>
                                    <a href="{{generalInfo.twitter}}"><img src="/assets/img/icon-twitter.svg" width="28" alt=""></a>
                                </li>
                                <li>
                                    <a href="{{generalInfo.instagram}}"><img src="/assets/img/icon-instagram.svg" width="28" alt=""></a>
                                </li>
                                <li>
                                    <a href="{{generalInfo.youtube}}"><img src="/assets/img/icon-youtube.svg" width="28" alt=""></a>
                                </li>
							{{/if}}
                        </ul>
                    </div>
                </div>
            </div>
       </div>
    </footer>

    <script type="text/javascript" src="/assets/js/jquery.min.js"></script>
	<script type="text/javascript" src="/assets/js/pace.config.js"></script>
	<script type="text/javascript" src="/assets/js/pace.min.js"></script>
	<script type="text/javascript" src="/assets/js/wow.min.js"></script>
	<script type="text/javascript" src="/assets/js/jquery.smartresize.js"></script>
	<script type="text/javascript" src="/assets/js/index.helpers.js"></script>
	<script type="text/javascript" src="/assets/js/bootstrap.min.js"></script>
    <script type="text/javascript" src="/assets/js/bootstrap-paginator.js"></script>
	{{#if isIndicatorsSection}}
        <script type="text/javascript" src="/assets/js/select2.full.js"></script>
        <script type="text/javascript" src="/assets/js/amcharts.js"></script>
        <script type="text/javascript" src="/assets/js/serial.js"></script>
        <script type="text/javascript" src="/assets/js/jquery.barrating.min.js"></script>
	{{/if}}
	{{#if isNewsDetailsSection}}
        <script type="text/javascript" src="/assets/js/amcharts.js"></script>
        <script type="text/javascript" src="/assets/js/serial.js"></script>
        <script type="text/javascript" src="/assets/js/jquery.barrating.min.js"></script>
	{{/if}}
	{{#if isSearchSection}}
        <script type="text/javascript" src="/assets/js/jquery.barrating.min.js"></script>
	{{/if}}
    <script type="text/javascript" src="/assets/js/graccs.app.js"></script>

	{{#if isIndicatorsSection}}
        <script type="text/javascript">
            $('document').ready(function() {				
                var $set_top = $('.grid-content .set-top');
                var $set_bottom = $('.grid-content .set-bottom');

                $set_top.find('p').addClass('item-meta-desc hidden-xxs');
                $set_bottom.find('p').addClass('item-meta-desc hidden-xxs');

                $('.grid-content .item-meta-info').find('span:first-child').css('text-transform', 'uppercase');
            });
        </script>
	{{/if}}
	
	{{#if isIndicatorDetailsSection}}
        <script type="text/javascript" src="/assets/js/pdfmake.js"></script>
        <script type="text/javascript" src="/assets/js/vfs_fonts.js"></script>
		
        <script type="text/javascript">
            $(function () {
				var $departments = $('#departments');
                var $municipalities = $('#municipalities');
                var $communities = $('#communities');

                var area = $('#area_id').text().trim();
                var areaParent = $('#area_parent_id').text().trim();

                var indicator_id = "{{indicator._id}}";
				var title = "{{indicator.title}}";
                var slug = "{{indicator.slug}}";
                var code = "{{indicator.code}}";
                var version = "{{indicator.version}}";
                var date = "{{date indicator.startDate format='MMMM DD, YYYY'}}";
                var sector = "{{indicator.sector.name}}";
				var minAreaToApply = "{{indicator.minAreaToApply}}";
				var frequency = "{{indicator.frequency}}";
				var source = "{{indicator.source}}";
                var target = $('#target').text();//$('#target').html().replace('&lt;p&gt;', '').replace('&lt;/p&gt;', '');
                var collector = "{{indicator.collector}}";
                var analizer = "{{indicator.analizer}}";
                var authorizer = "{{indicator.authorizer}}";
                var publisher = "{{indicator.publisher}}";
				var global_points = [];
				var years = [];

                var formula = "{{indicator.formula}}";
                var realValueLabel = "{{indicator.realValue}}";
                var useDenominator = {{indicator.useDenominator}};
				var targetValueLabel = useDenominator ? "{{indicator.targetValue}}" : "";
				var areaType = {{indicator.areaNumber}};
                var areaTypeName = areaType === 3 ? 'community' : (areaType === 2 ? 'municipal' : (areaType === 1 ? 'department' : ''));

                var stockData = [
                    {
                        Symbol: "AAPL",
                        Company: "Apple Inc.",
                        Price: "132.54"
                    },
                    {
                        Symbol: "INTC",
                        Company: "Intel Corporation",
                        Price: "33.45"
                    },
                    {
                        Symbol: "GOOG",
                        Company: "Google Inc",
                        Price: "554.52"
                    },
                ];

                function convertArrayOfObjectsToCSV(args) {
                    var result, ctr, keys, columnDelimiter, lineDelimiter, data;

                    data = args.data || null;
                    if (data == null || !data.length) {
                        return null;
                    }

                    columnDelimiter = args.columnDelimiter || ',';
                    lineDelimiter = args.lineDelimiter || '\n';

                    keys = Object.keys(data[0]);

                    result = '';
                    result += keys.join(columnDelimiter);
                    result += lineDelimiter;

                    data.forEach(function(item) {
                        ctr = 0;
                        keys.forEach(function(key) {
                            if (ctr > 0) result += columnDelimiter;

                            result += item[key];
                            ctr++;
                        });
                        result += lineDelimiter;
                    });

                    return result;
                }

                window.downloadCSV = function(args) {
                    var data, filename, link;

                    var csv = convertArrayOfObjectsToCSV({
                        data: stockData
                    });
                    if (csv == null) return;

                    filename = args.filename || 'export.csv';

                    if (!csv.match(/^data:text\/csv/i)) {
                        csv = 'data:text/csv;charset=utf-8,' + csv;
                    }
                    data = encodeURI(csv);

                    link = document.createElement('a');
                    link.setAttribute('href', data);
                    link.setAttribute('download', filename);
                    link.click();
                };
				
                $('#vote-positive-button').click(function(e) {
                    e.preventDefault();

                    var $item = $(this);
                    var id = $item.data('comment-id');

                    if (id) {
                        var req = $.ajax({
                            method: 'POST',
                            url: '/post-comment/' + id + '/vote',
                            data: {vote: 1}
                        });

                        req.done(function (res) {
                            var value = parseInt($item.find('span:first-child').text()) + 1;
                            $item.find('span:first-child').text(value);
                            $item.unbind('click');
                            console.log('Comment vote updated successfully', res);
                        });

                        req.fail(function (res) {
                            console.log('Updating comment vote has failed', res);
                        });
                    }
                });

                $('#vote-negative-button').click(function(e) {
                    e.preventDefault();

                    var $item = $(this);
                    var id = $item.data('comment-id');

                    if (id) {
                        var req = $.ajax({
                            method: 'POST',
                            url: '/post-comment/' + id + '/vote',
                            data: {vote: -1}
                        });

                        req.done(function (res) {
                            var value = parseInt($item.find('span').text()) + 1;
                            $item.find('span').text(value);
                            $item.unbind('click');
                            console.log('Comment vote updated successfully', res);
                        });

                        req.fail(function (res) {
                            console.log('Updating comment vote has failed', res);
                        });
                    }
                });

                $('#vote-indicator-positive-button').click(function(e) {
                    e.preventDefault();

                    var $item = $(this);
                    var id = $item.data('comment-id');

                    if (id) {
                        var req = $.ajax({
                            method: 'POST',
                            url: '/indicator-comment/' + id,
                            data: { vote: 1 }
                        });

                        req.done(function (res) {
                            var value = parseInt($item.find('span:first-child').text()) + 1;
                            $item.find('span:first-child').text(value);
                            $item.unbind('click');
                            console.log('Comment vote updated successfully', res);
                        });

                        req.fail(function (res) {
                            console.log('Updating comment vote has failed', res);
                        });
                    }
                });

                $('#vote-indicator-negative-button').click(function(e) {
                    e.preventDefault();

                    var $item = $(this);
                    var id = $item.data('comment-id');

                    if (id) {
                        var req = $.ajax({
                            method: 'POST',
                            url: '/indicator-comment/' + id,
                            data: { vote: -1 }
                        });

                        req.done(function (res) {
                            var value = parseInt($item.find('span').text()) + 1;
                            $item.find('span').text(value);
                            $item.unbind('click');
                            console.log('Comment vote updated successfully', res);
                        });

                        req.fail(function (res) {
                            console.log('Updating comment vote has failed', res);
                        });
                    }
                });

                $('#bBuildGraph').click(function(e) {
                    $('#chartdiv').empty();

                    var department = $departments.val();
                    var municipality = $municipalities.val();
                    var community = $communities.val();

                    switch (areaType) {
                        case 1:
                            if (department)
                                get_points(indicator_id, 'department', department);
                            break;
                        case 2:
                            if (municipality) {
                                get_points(indicator_id, 'municipal', municipality);
                            }
                            else if (department) {
                                get_points_by_department(indicator_id, department);
                            }
                            break;
                        case 3:
                            if (community) {
                                get_points(indicator_id, 'community', community);
                            }
                            else {
                                if (municipality) {
                                    get_points_by_municipality(indicator_id, municipality);
                                }
                                else if (department) {
                                    get_points_by_department_without_municipality(indicator_id, department);
                                }
                            }
                            break;
                    }
                });

                $('#download-pdf-button').click(function(e) {
                    //e.preventDefault();

                    /*var areasToApply = '';
                    var area_header = '';
                    switch (minAreaToApply) {
                        case 'department':
                            areasToApply = "Regionales";
                            area_header = 'Región';
                            break;
                        case 'municipal':
                            areasToApply = "Regionales, Municipales";
                            area_header = 'Municipio';
                            break;
                        case 'community':
                            areasToApply = "Regionales, Municipales, Urbano-rurales";
                            area_header = 'Localidad';
                            break;
                    }
                    
                    var frequencyEs = '';
                    switch (frequency) {
                        case 'monthly':
                            frequencyEs = "Mensual";
                            break;
                        case 'quarterly':
                            frequencyEs = "Trimestral";
                            break;
                        case 'biannual':
                            frequencyEs = "Semestral";
                            break;
                        case 'annual':
                            frequencyEs = "Anual";
                            break;
                        case 'fifthly':
                            frequencyEs = "Cada cinco años";
                            break;
                        case 'decade':
                            frequencyEs = "Cada diez años";
                            break;
                    }
                    
                    var values_table = {};
                    if (global_points) {
                        var header = [];
                        var body = [];
                        
                        if (useDenominator) {
                            
                        }
                        else {
                            header = [{ rowSpan: 2, text: area_header, style: 'tableHeader'}, { colSpan: 3, style: 'tableHeader' } ];
                        }
                        
                        for (var i = 0; i < global_points.length; i++) {
                            
                        }
                    }

                    var docDefinition = {
                        compress: false,
                        // a string or { width: number, height: number }
                        pageSize: 'A4',
                        // by default we use portrait, you can change it to landscape if you wish
                        pageOrientation: 'portrait',
                        // [left, top, right, bottom] or [horizontal, vertical] or just a number for equal margins
                        pageMargins: [ 40, 60, 40, 60 ],
                        info: {
                            title: title,
                            author: 'Casabe', 
                            subject: 'GRACCS - Sistema de Información y Comunicación Regional',
                            keywords: 'indicadores'
                        },
                        content: [
                            { text: 'Información General', style: 'title' },
                            {
                                columns: [
                                    {
                                        style: 'label',
                                        width: 'auto',
                                        text: 'Nombre del Indicador: '
                                    },
                                    {
                                        width: '*',
                                        text: title
                                    }
                                ]
                            },
                            {
                                columns: [
                                    {
                                        style: 'label',
                                        width: 'auto',
                                        text: 'Código: '
                                    },
                                    {
                                        width: '*',
                                        text: code
                                    }
                                ]
                            },
                            {
                                columns: [
                                    {
                                        style: 'label',
                                        width: 'auto',
                                        text: 'Versión: '
                                    },
                                    {
                                        width: '*',
                                        text: version
                                    }
                                ]
                            },
                            {
                                columns: [
                                    {
                                        style: 'label',
                                        width: 'auto',
                                        text: 'Fecha de creación: '
                                    },
                                    {
                                        width: '*',
                                        text: date
                                    }
                                ]
                            },
                            {
                                columns: [
                                    {
                                        style: 'label',
                                        width: 'auto',
                                        text: 'Sector al que pertenece: '
                                    },
                                    {
                                        width: '*',
                                        text: sector
                                    }
                                ]
                            },
                            {
                                columns: [
                                    {
                                        style: 'label',
                                        width: 'auto',
                                        text: 'Desagregaciones a las que se aplica: '
                                    },
                                    {
                                        width: '*',
                                        text: areasToApply
                                    }
                                ]
                            },
                            {
                                columns: [
                                    {
                                        style: 'label',
                                        width: 'auto',
                                        text: 'Fuente: '
                                    },
                                    {
                                        width: '*',
                                        text: source && source != '' ? source : '-'
                                    }
                                ]
                            },
                            {
                                columns: [
                                    {
                                        style: 'label',
                                        width: 'auto',
                                        text: 'Objetivo: '
                                    },
                                    {
                                        width: '*',
                                        text: target && target != "" ? target : '-'
                                    }
                                ]
                            },
                            { text: 'Responsables del proceso', style: 'title' },
                            {
                                columns: [
                                    {
                                        style: 'label',
                                        width: 'auto',
                                        text: 'Recolectar la información: '
                                    },
                                    {
                                        width: '*',
                                        text: collector && collector != "" ? collector : '-'
                                    }
                                ]
                            },
                            {
                                columns: [
                                    {
                                        style: 'label',
                                        width: 'auto',
                                        text: 'Analizar la información: '
                                    },
                                    {
                                        width: '*',
                                        text: analizer && analizer != "" ? analizer : '-'
                                    }
                                ]
                            },
                            {
                                columns: [
                                    {
                                        style: 'label',
                                        width: 'auto',
                                        text: 'Autorizar la información: '
                                    },
                                    {
                                        width: '*',
                                        text: authorizer && authorizer != "" ? authorizer : '-'
                                    }
                                ]
                            },
                            {
                                columns: [
                                    {
                                        style: 'label',
                                        width: 'auto',
                                        text: 'Publicar la información: '
                                    },
                                    {
                                        width: '*',
                                        text: publisher && publisher != "" ? publisher : '-'
                                    }
                                ]
                            },
                            { text: 'Valores tabulares', style: 'title' },
                            {
                                style: 'tableExample',
                                table: {
                                    headerRows: 1,
                                    // dontBreakRows: true,
                                    // keepWithHeaderRows: 1,
                                    body: [
                                        [{text: 'Header 1', style: 'tableHeader'}, {text: 'Header 2', style: 'tableHeader'}, {text: 'Header 3', style: 'tableHeader'}],
                                        [
                                            'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
                                            'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
                                            'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',
                                        ]
                                    ]
                                }
                            },
                            {
                                style: 'tableExample',
                                table: {
                                    body: [
                                        [
                                            {
                                                border: [false, true, false, false],
                                                fillColor: '#eeeeee',
                                                text: 'border:\n[false, true, false, false]'
                                            },
                                            {
                                                border: [false, false, false, false],
                                                fillColor: '#dddddd',
                                                text: 'border:\n[false, false, false, false]'
                                            },
                                            {
                                                border: [true, true, true, true],
                                                fillColor: '#eeeeee',
                                                text: 'border:\n[true, true, true, true]'
                                            }
                                        ],
                                        [
                                            {
                                                rowSpan: 3,
                                                border: [true, true, true, true],
                                                fillColor: '#eeeeff',
                                                text: 'rowSpan: 3\n\nborder:\n[true, true, true, true]'
                                            },
                                            {
                                                border: undefined,
                                                fillColor: '#eeeeee',
                                                text: 'border:\nundefined'
                                            },
                                            {
                                                border: [true, false, false, false],
                                                fillColor: '#dddddd',
                                                text: 'border:\n[true, false, false, false]'
                                            }
                                        ],
                                        [
                                            '',
                                            {
                                                colSpan: 2,
                                                border: [true, true, true, true],
                                                fillColor: '#eeffee',
                                                text: 'colSpan: 2\n\nborder:\n[true, true, true, true]'
                                            },
                                            ''
                                        ],
                                        [
                                            '',
                                            {
                                                border: undefined,
                                                fillColor: '#eeeeee',
                                                text: 'border:\nundefined'
                                            },
                                            {
                                                border: [false, false, true, true],
                                                fillColor: '#dddddd',
                                                text: 'border:\n[false, false, true, true]'
                                            }
                                        ]
                                    ]
                                },
                                layout: {
                                    defaultBorder: false
                                }
                            },
                            {
                                style: 'tableExample',
                                table: {
                                    body: [
                                        [
                                            { rowSpan: 2, text: 'Municipio', style: 'tableHeader'}, 
                                             { colSpan: 3, text: 'Enero 2016', style: 'tableHeader' }, '', '',
                                            { colSpan: 3, text: 'Febrero 2016', style: 'tableHeader' }, '', '',
                                            { colSpan: 3, text: 'Marzo 2016', style: 'tableHeader' }, '', '',
                                            { colSpan: 3, text: 'Abril 2016', style: 'tableHeader' }, '', '',
                                            { colSpan: 3, text: 'Mayo 2016', style: 'tableHeader' }, '', '',
                                        ],
                                        ['', 
                                            { text: 'Realizado', style: 'tableHeader' }, { text: 'Planificado', style: 'tableHeader' }, { text: '%', style: 'tableHeader' },
                                            { text: 'Realizado', style: 'tableHeader' }, { text: 'Planificado', style: 'tableHeader' }, { text: '%', style: 'tableHeader' },
                                            { text: 'Realizado', style: 'tableHeader' }, { text: 'Planificado', style: 'tableHeader' }, { text: '%', style: 'tableHeader' },
                                            { text: 'Realizado', style: 'tableHeader' }, { text: 'Planificado', style: 'tableHeader' }, { text: '%', style: 'tableHeader' },
                                            { text: 'Realizado', style: 'tableHeader' }, { text: 'Planificado', style: 'tableHeader' }, { text: '%', style: 'tableHeader' },
                                        ],
                                        [ 	{ text: 'Bluefields', },
                                            { text: 'Realizado', style: 'tableHeader' }, { text: 'Planificado', style: 'tableHeader' }, { text: '%', style: 'tableHeader' },
                                            { text: 'Realizado', style: 'tableHeader' }, { text: 'Planificado', style: 'tableHeader' }, { text: '%', style: 'tableHeader' },
                                            { text: 'Realizado', style: 'tableHeader' }, { text: 'Planificado', style: 'tableHeader' }, { text: '%', style: 'tableHeader' },
                                            { text: 'Realizado', style: 'tableHeader' }, { text: 'Planificado', style: 'tableHeader' }, { text: '%', style: 'tableHeader' },
                                            { text: 'Realizado', style: 'tableHeader' }, { text: 'Planificado', style: 'tableHeader' }, { text: '%', style: 'tableHeader' },
                                        ]
                                    ]
                                }
                            }
                        ],
                        styles: {
                            title: {
                                fontSize: 14,
                                bold: true,
                                color: '#678B0D',
                                margin: [0, 10]
                            },
                            label: {
                                fontSize: 12,
                                bold: true,
                                margin: [0, 0, 5, 10],
                                alignment: 'left'
                            },
                            description: {
                                fontSize: 12,
                                margin: [0, 0, 0, 10],
                                alignment: 'left'
                            },
                            header: {
                                fontSize: 18,
                                bold: true,
                                margin: [0, 0, 0, 10]
                            },
                            subheader: {
                                fontSize: 16,
                                bold: true,
                                margin: [0, 10, 0, 5]
                            },
                            tableExample: {
                                margin: [0, 5, 0, 15]
                            },
                            tableHeader: {
                                bold: true,
                                fontSize: 13,
                                color: 'black',
                                alignment: 'center'
                            }
                        }
                    };
                    
                    // open the PDF in a new window
                    pdfMake.createPdf(docDefinition).download(slug + '.pdf');*/
                });
				
				$('.form-control.select').select2({
                    theme: "bootstrap",
                    placeholder: "-- Seleccionar --",
                    allowClear: true
                });

                $('#graph_tab a:first').tab('show');

                $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
                    var current_tab = e.target; // newly activated tab
                    var last_tab = e.relatedTarget; // previous active tab

                    $('.form-control.select').select2({
                        theme: "bootstrap",
                        placeholder: "-- Seleccionar --",
                        allowClear: true
                    });
				});

                $departments.change(function(e) {
                    var department = $departments.val();

                    if (department && areaType >= 2) {
                        get_municipalities(department);
                    }
					else {
                        $municipalities.html('').select2({
                            theme: "bootstrap",
                            placeholder: "-- Seleccionar --",
                            allowClear: true,
                            data: []
                        });

                        $communities.html('').select2({
                            theme: "bootstrap",
                            placeholder: "-- Seleccionar --",
                            allowClear: true,
                            data: []
                        });
                    }
                });
				
				$municipalities.change(function(e) {
                    var municipality = $municipalities.val();

                    if (municipality) {
						if (areaType === 3) get_communities(municipality);
                    }
					else {
                        $communities.html('').select2({
                            theme: "bootstrap",
                            placeholder: "-- Seleccionar --",
                            allowClear: true,
                            data: []
                        });
                    }
				});
				
                function get_initial_data() {
                    if (indicator_id && areaTypeName != '' && area != '') {
						select_areas_value(area, areaParent);
						
                        var req = $.ajax({
                            url: '/get-initial-data',
                            data: { indicator: indicator_id, type: areaTypeName, area: area }
                        });

                        req.done(function (results) {
                            console.log('Getting initial data success', results);

                            if (results && results.points && results.points.length > 0) {
                                $('#download-excel-button').attr('href', '/generate-csv?id='+ indicator_id +'&slug='+ slug +'&area_type='+ areaTypeName +'&area_id='+ area);
                                build_points(results.points);
                            }
							else {
                                $('#download-excel-button').attr('href', '/indicador/' + slug);
                            }
                        });

                        req.fail(function (res) {
                            console.log('Getting initial data has failed', res);
                        });
					}
				}

                function get_municipalities(parent, municipality) {
                    if (parent) {
                        var req = $.ajax({
                            url: '/get-municipalities',
                            data: { parent: parent }
                        });

                        req.done(function (results) {
                            console.log('Getting municipalities successfully: ', results);

                            if (results && results.data && results.data.length > 0) {
                                var data = [];
								
                                $.each(results.data, function (key,val) {
									data.push({ id: val._id, text: val.name });
                                });

                                $municipalities.html('').select2({
                                    theme: "bootstrap",
                                    placeholder: "-- Seleccionar --",
                                    allowClear: true,
                                    data: data
                                });
								
								if (municipality) {
									$municipalities.val(municipality).trigger("change");
                                    get_communities(municipality);
                                }
								else {
									municipality = $municipalities.val();
                                    get_communities(municipality);
                                }
                            }
                        });

                        req.fail(function (res) {
                            console.log('Getting municipalities has failed', res);
                        });
                    }
                }

                function get_municipality(municipality) {
                    if (municipality) {
                        var req = $.ajax({
                            url: '/get-municipality',
                            data: { id: municipality }
                        });

                        req.done(function (results) {
                            console.log('Getting municipality successfully: ', results);

                            if (results && results.related_municipal_areas && results.related_municipal_areas.length > 0) {
                                var data = [];

                                $.each(results.related_municipal_areas, function (key,val) {
                                    data.push({ id: val._id, text: val.name });
                                });

                                $municipalities.html('').select2({
                                    theme: "bootstrap",
                                    placeholder: "-- Seleccionar --",
                                    allowClear: true,
                                    data: data
                                });
								
								$municipalities.val(municipality).trigger("change");
								get_communities(municipality);
								
                                if (results.municipal_area) $departments.val(results.municipal_area.parent).trigger("change");
                            }
                        });

                        req.fail(function (res) {
                            console.log('Getting municipalities has failed', res);
                        });
                    }
                }

                function get_communities(parent, community) {
					if (parent) {
                        var req = $.ajax({
                            url: '/get-communities',
                            data: { parent: parent }
                        });

                        req.done(function (results) {
                            console.log('Getting communities successfully: ', results);

                            if (results && results.data && results.data.length > 0) {
                                var data = [];
                                var selected_option = '';

                                $.each(results.data, function (key,val) {
                                    data.push({ id: val._id, text: val.name });
                                    if (community) selected_option = val._id;
                                });

                                $communities.html('').select2({
                                    theme: "bootstrap",
                                    placeholder: "-- Seleccionar --",
                                    allowClear: true,
                                    data: data
                                });

                                if (selected_option) $communities.value = selected_option;
                            }
                        });

                        req.fail(function (res) {
                            console.log('Getting communities has failed', res);
                        });	
					}
				}
				
				function select_areas_value(area_id, parent_id) {
					if (areaType === 1) {
						$departments.val(area_id).trigger("change");
                    }
					else if (areaType === 2) {
						get_municipalities(parent_id, area_id);
                    }
					else  if (areaType === 3) {
						get_municipality(parent_id);
                    }
				}

                function get_points(indicator, type, area) {
                    if (indicator && type && area) {
                        var req = $.ajax({
                            url: '/get-points',
                            data: { area_type: type, area_id: area, indicator_id: indicator }
                        });

                        req.done(function (results) {
                            if (results && results.points && results.points.length > 0) {
								$('#download-excel-button').attr('href', '/generate-csv?id='+ indicator_id +'&slug='+ slug +'&area_type='+ type +'&area_id='+ area);
                                build_points(results.points);
                            }
							else {
                                $('#download-excel-button').attr('href', '/indicador/' + slug);
                            }
                        });

                        req.fail(function (res) {
                            console.log('Getting points has failed', res);
                        });
                    }
                }

                function get_points_by_municipality(indicator, municipality) {
                    if (indicator && municipality) {
                        var req = $.ajax({
                            url: '/get-points-by-municipality',
                            data: { indicator_id: indicator, municipality_id: municipality }
                        });

                        req.done(function (results) {
                            if (results && results.points_array && results.points_array.length > 0) {
                                var years = [];
                                var realValues = [];
                                var realValuesCount = [];
                                var targetValues = [];
                                var targetValuesCount = [];
                                var comparativeValues = [];
                                var comparativeValuesCount = [];
                                var points = [];
								
								$.each(results.points_array, function(key, points) {
									$.each(points, function(key_1, point) {
                                        var year = '';

                                        if (point.isMonthlyFrequency) {
                                            var month = '';

                                            switch (parseInt(point.monthlyFrequency)) {
                                                case 1:
                                                    month = 'Enero';
                                                    break;
                                                case 2:
                                                    month = 'Febrero';
                                                    break;
                                                case 3:
                                                    month = 'Marzo';
                                                    break;
                                                case 4:
                                                    month = 'Abril';
                                                    break;
                                                case 5:
                                                    month = 'Mayo';
                                                    break;
                                                case 6:
                                                    month = 'Junio';
                                                    break;
                                                case 7:
                                                    month = 'Julio';
                                                    break;
                                                case 8:
                                                    month = 'Agosto';
                                                    break;
                                                case 9:
                                                    month = 'Septiembre';
                                                    break;
                                                case 10:
                                                    month = 'Octubre';
                                                    break;
                                                case 11:
                                                    month = 'Noviembre';
                                                    break;
                                                case 12:
                                                    month = 'Diciembre';
                                                    break;
                                            }

                                            year = month + ' ' + point.startYear;
                                        }
                                        else if (point.isQuarterlyFrequency) {
                                            var quarter = '';

                                            switch (parseInt(point.quarterlyFrequency)) {
                                                case 1:
                                                    quarter = 'I Trimestre';
                                                    break;
                                                case 2:
                                                    quarter = 'II Trimestre';
                                                    break;
                                                case 3:
                                                    quarter = 'III Trimestre';
                                                    break;
                                                case 4:
                                                    quarter = 'IV Trimestre';
                                                    break;
                                            }

                                            year = quarter + ' ' + point.startYear;
                                        }
                                        else if (point.isBiannualFrequency) {
                                            var biannual = '';

                                            switch (parseInt(point.biannualFrequency)) {
                                                case 1:
                                                    biannual = 'I Semestre';
                                                    break;
                                                case 2:
                                                    biannual = 'II Semestre';
                                                    break;
                                            }

                                            year = biannual + ' ' + point.startYear;
                                        }
                                        else {
                                            year = point.startYear;
                                        }

                                        if (years.indexOf(year) === -1) years.push(year);

                                        if (!realValues[year]) {
                                            realValues[year] = point.realValue;
                                            realValuesCount[year] = 1;
                                        }
                                        else {
                                            realValues[year] += point.realValue;
                                            realValuesCount[year]++;
                                        }

                                        if (!targetValues[year]) {
                                            targetValues[year] = point.targetValue;
                                            targetValuesCount[year] = 1;
                                        }
                                        else {
                                            targetValues[year] += point.targetValue;
                                            targetValuesCount[year]++;
                                        }

                                        if (!comparativeValues[year]) {
                                            comparativeValues[year] = point.comparativeValue;
                                            comparativeValuesCount[year] = 1;
                                        }
                                        else {
                                            comparativeValues[year] += point.comparativeValue;
                                            comparativeValuesCount[year]++;
                                        }
									});
                                });
								
								$.each(years, function(key, year) {
									var point;

                                    var real_value = formula === 'sum' ? realValues[year] : (realValuesCount[year] != 0 ? realValues[year] / realValuesCount[year] : 0);
                                    var comparative_value = formula === 'sum' ? comparativeValues[year] : (comparativeValuesCount[year] != 0 ? comparativeValues[year] / comparativeValuesCount[year] : 0);
									
                                    if (useDenominator) {
                                        var target_value = formula === 'sum' ? targetValues[year] : (targetValuesCount[year] != 0 ? targetValues[year] / targetValuesCount[year] : 0);

                                        point = { "year": year, "value": real_value, "value_2": target_value, "value_3": comparative_value,
                                            "percent": targetValues[year] !== 0 ? "<br />Representa: " + Number((realValues[year] / targetValues[year]) * 100).toPrecision(4) + "%" : "" };
                                    }
                                    else {
                                        point = { "year": year, "value": real_value, "value_3": comparative_value,
                                            "percent": comparativeValues[year] !== 0 ? "<br />Representa: " + Number((realValues[year] / targetValues[year]) * 100).toPrecision(4) + "%" : ""};
                                    }

                                    points.push(point);
								});

                                if (useDenominator) {
                                    $('.indicator-value').html(Number(points[points.length - 1].value_2 - points[points.length - 1].value).toPrecision(2));
                                    drawGraph(points);
                                }
                                else {
                                    $('.indicator-value').html(Number(points[points.length - 1].value_3 - points[points.length - 1].value).toPrecision(2));
                                    drawGraphOneLine(points);
                                }
                            }
                        });

                        req.fail(function (res) {
                            console.log('Getting points by municipality has failed', res);
                        });
                    }
                }
				
				function get_points_by_department(indicator, department) {
                    if (indicator && department) {
                        var req = $.ajax({
                            url: '/get-points-by-department',
                            data: { indicator_id: indicator, department_id: department }
                        });

                        req.done(function (results) {
                            if (results && results.points_array && results.points_array.length > 0) {
                                var years = [];
                                var realValues = [];
								var realValuesCount = [];
                                var targetValues = [];
                                var targetValuesCount = [];
                                var comparativeValues = [];
                                var comparativeValuesCount = [];
                                var points = [];

                                $.each(results.points_array, function(key, points) {
                                    $.each(points, function(key_1, point) {
                                        var year = '';

                                        if (point.isMonthlyFrequency) {
                                            var month = '';

                                            switch (parseInt(point.monthlyFrequency)) {
                                                case 1:
                                                    month = 'Enero';
                                                    break;
                                                case 2:
                                                    month = 'Febrero';
                                                    break;
                                                case 3:
                                                    month = 'Marzo';
                                                    break;
                                                case 4:
                                                    month = 'Abril';
                                                    break;
                                                case 5:
                                                    month = 'Mayo';
                                                    break;
                                                case 6:
                                                    month = 'Junio';
                                                    break;
                                                case 7:
                                                    month = 'Julio';
                                                    break;
                                                case 8:
                                                    month = 'Agosto';
                                                    break;
                                                case 9:
                                                    month = 'Septiembre';
                                                    break;
                                                case 10:
                                                    month = 'Octubre';
                                                    break;
                                                case 11:
                                                    month = 'Noviembre';
                                                    break;
                                                case 12:
                                                    month = 'Diciembre';
                                                    break;
                                            }

                                            year = month + ' ' + point.startYear;
                                        }
                                        else if (point.isQuarterlyFrequency) {
                                            var quarter = '';

                                            switch (parseInt(point.quarterlyFrequency)) {
                                                case 1:
                                                    quarter = 'I Trimestre';
                                                    break;
                                                case 2:
                                                    quarter = 'II Trimestre';
                                                    break;
                                                case 3:
                                                    quarter = 'III Trimestre';
                                                    break;
                                                case 4:
                                                    quarter = 'IV Trimestre';
                                                    break;
                                            }

                                            year = quarter + ' ' + point.startYear;
                                        }
                                        else if (point.isBiannualFrequency) {
                                            var biannual = '';

                                            switch (parseInt(point.biannualFrequency)) {
                                                case 1:
                                                    biannual = 'I Semestre';
                                                    break;
                                                case 2:
                                                    biannual = 'II Semestre';
                                                    break;
                                            }

                                            year = biannual + ' ' + point.startYear;
                                        }
                                        else {
                                            year = point.startYear;
                                        }

                                        if (years.indexOf(year) === -1) years.push(year);

                                        if (!realValues[year]) {
                                            realValues[year] = point.realValue;
											realValuesCount[year] = 1;
                                        }
                                        else {
                                            realValues[year] += point.realValue;
                                            realValuesCount[year]++;
                                        }

                                        if (!targetValues[year]) {
                                            targetValues[year] = point.targetValue;
                                            targetValuesCount[year] = 1;
                                        }
                                        else {
                                            targetValues[year] += point.targetValue;
                                            targetValuesCount[year]++;
                                        }

                                        if (!comparativeValues[year]) {
                                            comparativeValues[year] = point.comparativeValue;
                                            comparativeValuesCount[year] = 1;
                                        }
                                        else {
                                            comparativeValues[year] += point.comparativeValue;
                                            comparativeValuesCount[year]++;
                                        }
                                    });
                                });

                                $.each(years, function(key, year) {
                                    var point;
									var real_value = formula === 'sum' ? realValues[year] : (realValuesCount[year] != 0 ? realValues[year] / realValuesCount[year] : 0);
                                    var comparative_value = formula === 'sum' ? comparativeValues[year] : (comparativeValuesCount[year] != 0 ? comparativeValues[year] / comparativeValuesCount[year] : 0);
                                    
									if (useDenominator) {
                                        var target_value = formula === 'sum' ? targetValues[year] : (targetValuesCount[year] != 0 ? targetValues[year] / targetValuesCount[year] : 0);

                                        point = { "year": year, "value": real_value, "value_2": target_value, "value_3": comparative_value,
                                            "percent": targetValues[year] !== 0 ? "<br />Representa: " + Number((realValues[year] / targetValues[year]) * 100).toPrecision(4) + "%" : "" };
                                    }
                                    else {
                                        point = { "year": year, "value": real_value, "value_3": comparative_value,
                                            "percent": comparativeValues[year] !== 0 ? "<br />Representa: " + Number((realValues[year] / targetValues[year]) * 100).toPrecision(4) + "%" : ""};
                                    }

                                    points.push(point);
                                });

                                if (useDenominator) {
                                    $('.indicator-value').html(Number(points[points.length - 1].value_2 - points[points.length - 1].value).toPrecision(2));
                                    drawGraph(points);
                                }
                                else {
                                    $('.indicator-value').html(Number(points[points.length - 1].value_3 - points[points.length - 1].value).toPrecision(2));
                                    drawGraphOneLine(points);
                                }
                            }
                        });

                        req.fail(function (res) {
                            console.log('Getting points by department has failed', res);
                        });
                    }
                }
				
				function get_points_by_department_without_municipality(indicator, department) {
                    if (indicator && department) {
                        var req = $.ajax({
                            url: '/get-points-by-department-without-municipality',
                            data: { indicator_id: indicator, department_id: department }
                        });

                        req.done(function (results) {
                            console.log('Getting points by department successfully: ', results);

                            if (results && results.points_array && results.points_array.length > 0) {
                                var years = [];
                                var realValues = [];
                                var realValuesCount = [];
                                var targetValues = [];
                                var targetValuesCount = [];
                                var comparativeValues = [];
                                var comparativeValuesCount = [];
                                var points = [];

                                $.each(results.points_array, function(key, points) {
                                    $.each(points, function(key_1, point) {
                                        var year = '';

                                        if (point.isMonthlyFrequency) {
                                            var month = '';

                                            switch (parseInt(point.monthlyFrequency)) {
                                                case 1:
                                                    month = 'Enero';
                                                    break;
                                                case 2:
                                                    month = 'Febrero';
                                                    break;
                                                case 3:
                                                    month = 'Marzo';
                                                    break;
                                                case 4:
                                                    month = 'Abril';
                                                    break;
                                                case 5:
                                                    month = 'Mayo';
                                                    break;
                                                case 6:
                                                    month = 'Junio';
                                                    break;
                                                case 7:
                                                    month = 'Julio';
                                                    break;
                                                case 8:
                                                    month = 'Agosto';
                                                    break;
                                                case 9:
                                                    month = 'Septiembre';
                                                    break;
                                                case 10:
                                                    month = 'Octubre';
                                                    break;
                                                case 11:
                                                    month = 'Noviembre';
                                                    break;
                                                case 12:
                                                    month = 'Diciembre';
                                                    break;
                                            }

                                            year = month + ' ' + point.startYear;
                                        }
                                        else if (point.isQuarterlyFrequency) {
                                            var quarter = '';

                                            switch (parseInt(point.quarterlyFrequency)) {
                                                case 1:
                                                    quarter = 'I Trimestre';
                                                    break;
                                                case 2:
                                                    quarter = 'II Trimestre';
                                                    break;
                                                case 3:
                                                    quarter = 'III Trimestre';
                                                    break;
                                                case 4:
                                                    quarter = 'IV Trimestre';
                                                    break;
                                            }

                                            year = quarter + ' ' + point.startYear;
                                        }
                                        else if (point.isBiannualFrequency) {
                                            var biannual = '';

                                            switch (parseInt(point.biannualFrequency)) {
                                                case 1:
                                                    biannual = 'I Semestre';
                                                    break;
                                                case 2:
                                                    biannual = 'II Semestre';
                                                    break;
                                            }

                                            year = biannual + ' ' + point.startYear;
                                        }
                                        else {
                                            year = point.startYear;
                                        }

                                        if (years.indexOf(year) === -1) years.push(year);

                                        if (!realValues[year]) {
                                            realValues[year] = point.realValue;
                                            realValuesCount[year] = 1;
                                        }
                                        else {
                                            realValues[year] += point.realValue;
                                            realValuesCount[year]++;
                                        }

                                        if (!targetValues[year]) {
                                            targetValues[year] = point.targetValue;
                                            targetValuesCount[year] = 1;
                                        }
                                        else {
                                            targetValues[year] += point.targetValue;
                                            targetValuesCount[year]++;
                                        }

                                        if (!comparativeValues[year]) {
                                            comparativeValues[year] = point.comparativeValue;
                                            comparativeValuesCount[year] = 1;
                                        }
                                        else {
                                            comparativeValues[year] += point.comparativeValue;
                                            comparativeValuesCount[year]++;
                                        }
                                    });
                                });

                                $.each(years, function(key, year) {
                                    var point;
                                    var real_value = formula === 'sum' ? realValues[year] : (realValuesCount[year] != 0 ? realValues[year] / realValuesCount[year] : 0);
                                    var comparative_value = formula === 'sum' ? comparativeValues[year] : (comparativeValuesCount[year] != 0 ? comparativeValues[year] / comparativeValuesCount[year] : 0);

                                    if (useDenominator) {
                                        var target_value = formula === 'sum' ? targetValues[year] : (targetValuesCount[year] != 0 ? targetValues[year] / targetValuesCount[year] : 0);

                                        point = { "year": year, "value": real_value, "value_2": target_value, "value_3": comparative_value,
                                            "percent": targetValues[year] !== 0 ? "<br />Representa: " + Number((realValues[year] / targetValues[year]) * 100).toPrecision(4) + "%" : "" };
                                    }
                                    else {
                                        point = { "year": year, "value": real_value, "value_3": comparative_value,
                                            "percent": comparativeValues[year] !== 0 ? "<br />Representa: " + Number((realValues[year] / targetValues[year]) * 100).toPrecision(4) + "%" : ""};
                                    }

                                    points.push(point);
                                });

                                if (useDenominator) {
                                    $('.indicator-value').html(Number(points[points.length - 1].value_2 - points[points.length - 1].value).toPrecision(2));
                                    drawGraph(points);
                                }
                                else {
                                    $('.indicator-value').html(Number(points[points.length - 1].value_3 - points[points.length - 1].value).toPrecision(2));
                                    drawGraphOneLine(points);
                                }
                            }
                        });

                        req.fail(function (res) {
                            console.log('Getting points by department has failed', res);
                        });
                    }
                }

                function build_points(data_points) {
                    if (data_points && data_points.length > 0) {
                        var points = [];

                        for (var i = 0; i < data_points.length; i++) {
                            var point = null;
                            var year = '';

                            if (data_points[i].isMonthlyFrequency) {
                                var month = '';

                                switch (parseInt(data_points[i].monthlyFrequency)) {
                                    case 1:
                                        month = 'Enero';
                                        break;
                                    case 2:
                                        month = 'Febrero';
                                        break;
                                    case 3:
                                        month = 'Marzo';
                                        break;
                                    case 4:
                                        month = 'Abril';
                                        break;
                                    case 5:
                                        month = 'Mayo';
                                        break;
                                    case 6:
                                        month = 'Junio';
                                        break;
                                    case 7:
                                        month = 'Julio';
                                        break;
                                    case 8:
                                        month = 'Agosto';
                                        break;
                                    case 9:
                                        month = 'Septiembre';
                                        break;
                                    case 10:
                                        month = 'Octubre';
                                        break;
                                    case 11:
                                        month = 'Noviembre';
                                        break;
                                    case 12:
                                        month = 'Diciembre';
                                        break;
                                }

                                year = month + ' ' + data_points[i].startYear;
                            }
                            else if (data_points[i].isQuarterlyFrequency) {
                                var quarter = '';

                                switch (parseInt(data_points[i].quarterlyFrequency)) {
                                    case 1:
                                        quarter = 'I Trimestre';
                                        break;
                                    case 2:
                                        quarter = 'II Trimestre';
                                        break;
                                    case 3:
                                        quarter = 'III Trimestre';
                                        break;
                                    case 4:
                                        quarter = 'IV Trimestre';
                                        break;
                                }

                                year = quarter + ' ' + data_points[i].startYear;
                            }
                            else if (data_points[i].isBiannualFrequency) {
                                var biannual = '';

                                switch (parseInt(data_points[i].biannualFrequency)) {
                                    case 1:
                                        biannual = 'I Semestre';
                                        break;
                                    case 2:
                                        biannual = 'II Semestre';
                                        break;
                                }

                                year = biannual + ' ' + data_points[i].startYear;
                            }
                            else {
                                year = data_points[i].startYear;
                            }

                            if (useDenominator) {
                                point = {
                                    "year": year,
                                    "value": data_points[i].realValue,
                                    "value_2": data_points[i].targetValue,
                                    "value_3": data_points[i].comparativeValue ? data_points[i].comparativeValue : 0,
                                    "percent": data_points[i].targetValue !== 0 ? "<br />Representa: " + Number((data_points[i].realValue / data_points[i].targetValue) * 100).toPrecision(4) + "%" : ""
                                };
                            }
                            else {
                                point = {
                                    "year": year, "value": data_points[i].realValue,
                                    "value_3": data_points[i].comparativeValue ? data_points[i].comparativeValue : 0,
                                    "percent": data_points[i].targetValue !== 0 ? "<br />Representa: " + Number((data_points[i].realValue / data_points[i].targetValue) * 100).toPrecision(4) + "%" : ""
                                };
                            }

                            points.push(point);
                        }

                        if (useDenominator) {
                            $('.indicator-value').html(Number(points[points.length - 1].value_2 - points[points.length - 1].value).toPrecision(2));
                            drawGraph(points);
                        }
                        else {
                            $('.indicator-value').html(Number(points[points.length - 1].value_3 - points[points.length - 1].value).toPrecision(2));
                            drawGraphOneLine(points);
                        }
						
						global_points = points;
						console.log('global_points: ', global_points);
                    }
                }
				
                function drawGraphOneLine(points) {
                    var chart;
                    var graph, graph_3;

                    // SERIAL CHART
                    chart = new AmCharts.AmSerialChart();

                    chart.dataProvider = points;
                    chart.marginLeft = 10;
                    chart.categoryField = "year";

                    // AXES
                    // category
                    var categoryAxis = chart.categoryAxis;
                    categoryAxis.dashLength = 3;
                    categoryAxis.minorGridEnabled = true;
                    categoryAxis.minorGridAlpha = 0.1;

                    // value
                    var valueAxis = new AmCharts.ValueAxis();
                    valueAxis.axisAlpha = 0;
                    valueAxis.inside = true;
                    valueAxis.dashLength = 3;
                    chart.addValueAxis(valueAxis);

                    // GRAPH
                    graph = new AmCharts.AmGraph();
                    graph.type = "column"; // this line makes the graph smoothed line.
                    graph.title = realValueLabel ? realValueLabel : "Valor real";
                    graph.valueField = "value";
                    graph.lineColor = "#FFA92E";
                    graph.lineAlpha = 1;
                    graph.fillAlphas = 1;
                    graph.dashLengthField = "dashLengthColumn";
                    graph.alphaField = "alpha";
                    graph.balloonText = "<span style='font-size:13px;'>[[title]] en [[category]]:<b>[[value]]</b> [[percent]]</span>";
                    chart.addGraph(graph);

                    graph_3 = new AmCharts.AmGraph();
                    graph_3.type = "smoothedLine"; // this line makes the graph smoothed line.
                    graph_3.title = "Valor comparativo";
                    graph_3.lineColor = "#76AF25";
                    graph_3.negativeLineColor = "#678B0D"; // this line makes the graph to change color when it drops below 0
                    graph_3.bullet = "round";
                    graph_3.bulletSize = 8;
                    graph_3.bulletBorderColor = "#FFFFFF";
                    graph_3.bulletBorderAlpha = 1;
                    graph_3.bulletBorderThickness = 2;
                    graph_3.lineThickness = 2;
                    graph_3.valueField = "value_3";
                    graph_3.balloonText = "<span style='font-size:13px;'>[[title]] en [[category]]:<b>[[value]]</b> [[additional]]</span>";
                    chart.addGraph(graph_3);
					
                    // CURSOR
                    /*  var chartCursor = new AmCharts.ChartCursor();
                        chartCursor.cursorAlpha = 0;
                        chartCursor.cursorPosition = "mouse";
                        chartCursor.categoryBalloonDateFormat = "YYYY";
                        chart.addChartCursor(chartCursor);*/

                    // SCROLLBAR
                    /*  var chartScrollbar = new AmCharts.ChartScrollbar();
                        chart.addChartScrollbar(chartScrollbar);*/

                    // LEGEND
                    var legend = new AmCharts.AmLegend();
                    legend.marginLeft = 110;
                    legend.useGraphSettings = true;
                    chart.addLegend(legend);

                    chart.creditsPosition = "bottom-right";

                    // WRITE
                    chart.write("chartdiv");
                    $('.amChartsLegend.amcharts-legend-div').css('margin-top', '18px');
                }

                function drawGraph(points) {
                    var chart;
                    var graph, graph_2, graph_3;

                    // SERIAL CHART
                    chart = new AmCharts.AmSerialChart();

                    chart.dataProvider = points;
                    chart.marginLeft = 10;
                    chart.categoryField = "year";
                    chart.startDuration = 1;

                    // AXES
                    // category
                    var categoryAxis = chart.categoryAxis;
                    categoryAxis.gridPosition = "start";

                    // value
                    var valueAxis = new AmCharts.ValueAxis();
                    valueAxis.axisAlpha = 0;
                    chart.addValueAxis(valueAxis);

                    // GRAPH
                    graph = new AmCharts.AmGraph();
                    graph.type = "column"; // this line makes the graph smoothed line.
                    graph.title = realValueLabel ? realValueLabel : "Valor real";
                    graph.valueField = "value";
                    graph.lineColor = "#FFA92E";
                    graph.lineAlpha = 1;
                    graph.fillAlphas = 1;
                    graph.dashLengthField = "dashLengthColumn";
                    graph.alphaField = "alpha";
                    graph.balloonText = "<span style='font-size:13px;'>[[title]] en [[category]]:<b>[[value]]</b> [[percent]]</span>";
                    chart.addGraph(graph);

                    // GRAPH
                    graph_2 = new AmCharts.AmGraph();
                    graph_2.type = "column"; // this line makes the graph smoothed line.
                    graph_2.title = targetValueLabel ? targetValueLabel : "Valor planificado";
                    graph_2.valueField = "value_2";
                    graph_2.lineColor = "#162A59";
                    graph_2.lineAlpha = 1;
                    graph_2.fillAlphas = 1;
                    graph_2.dashLengthField = "dashLengthColumn";
                    graph_2.alphaField = "alpha";
                    graph_2.balloonText = "<span style='font-size:13px;'>[[title]] en [[category]]:<b>[[value]]</b> [[additional]]</span>";
                    chart.addGraph(graph_2);

                    graph_3 = new AmCharts.AmGraph();
                    graph_3.type = "smoothedLine"; // this line makes the graph smoothed line.
                    graph_3.title = "Valor comparativo";
                    graph_3.lineColor = "#76AF25";
                    graph_3.negativeLineColor = "#678B0D"; // this line makes the graph to change color when it drops below 0
                    graph_3.bullet = "round";
                    graph_3.bulletSize = 8;
                    graph_3.bulletBorderColor = "#FFFFFF";
                    graph_3.bulletBorderAlpha = 1;
                    graph_3.bulletBorderThickness = 2;
                    graph_3.lineThickness = 2;
                    graph_3.valueField = "value_3";
                    graph_3.balloonText = "<span style='font-size:13px;'>[[title]] en [[category]]:<b>[[value]]</b> [[additional]]</span>";
                    chart.addGraph(graph_3);

                    // CURSOR
                    /*  var chartCursor = new AmCharts.ChartCursor();
                        chartCursor.cursorAlpha = 0;
                        chartCursor.cursorPosition = "mouse";
                        chartCursor.categoryBalloonDateFormat = "YYYY";
                        chart.addChartCursor(chartCursor);*/

                    // SCROLLBAR
                    /*  var chartScrollbar = new AmCharts.ChartScrollbar();
                        chart.addChartScrollbar(chartScrollbar);*/

                    // LEGEND
                    var legend = new AmCharts.AmLegend();
                    legend.marginLeft = 110;
                    legend.useGraphSettings = true;
                    chart.addLegend(legend);

                    chart.creditsPosition = "bottom-right";

                    // WRITE
                    chart.write("chartdiv");
					$('.amChartsLegend.amcharts-legend-div').css('margin-top', '18px');
                }
				
                get_initial_data();
            });
        </script>
	{{/if}}
	
	{{#if isNewsSection}}
        <script type="text/javascript" src="/assets/js/news.helpers.js"></script>
        <script type="text/javascript">
			$('document').ready(function() {
				var $set_top = $('.grid-news .set-top');
				
				$set_top.find('h2')
						.addClass('dotted-wrap')
                        .css('text-transform', 'uppercase');
				
				$('.grid-news .item-meta-info').find('span:first-child').css('text-transform', 'uppercase');
            });
		</script>
	{{/if}}
</body>
</html>
